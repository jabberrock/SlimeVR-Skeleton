// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace solarxr_protocol
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// MessageBundle contains all of the messages for the data feed system and the
/// rpc system that will be sent in one buffer.
public struct MessageBundle : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_22_10_26(); }
  public static MessageBundle GetRootAsMessageBundle(ByteBuffer _bb) { return GetRootAsMessageBundle(_bb, new MessageBundle()); }
  public static MessageBundle GetRootAsMessageBundle(ByteBuffer _bb, MessageBundle obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MessageBundle __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public solarxr_protocol.data_feed.DataFeedMessageHeader? DataFeedMsgs(int j) { int o = __p.__offset(4); return o != 0 ? (solarxr_protocol.data_feed.DataFeedMessageHeader?)(new solarxr_protocol.data_feed.DataFeedMessageHeader()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int DataFeedMsgsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
  public solarxr_protocol.rpc.RpcMessageHeader? RpcMsgs(int j) { int o = __p.__offset(6); return o != 0 ? (solarxr_protocol.rpc.RpcMessageHeader?)(new solarxr_protocol.rpc.RpcMessageHeader()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RpcMsgsLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
  public solarxr_protocol.pub_sub.PubSubHeader? PubSubMsgs(int j) { int o = __p.__offset(8); return o != 0 ? (solarxr_protocol.pub_sub.PubSubHeader?)(new solarxr_protocol.pub_sub.PubSubHeader()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int PubSubMsgsLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<solarxr_protocol.MessageBundle> CreateMessageBundle(FlatBufferBuilder builder,
      VectorOffset data_feed_msgsOffset = default(VectorOffset),
      VectorOffset rpc_msgsOffset = default(VectorOffset),
      VectorOffset pub_sub_msgsOffset = default(VectorOffset)) {
    builder.StartTable(3);
    MessageBundle.AddPubSubMsgs(builder, pub_sub_msgsOffset);
    MessageBundle.AddRpcMsgs(builder, rpc_msgsOffset);
    MessageBundle.AddDataFeedMsgs(builder, data_feed_msgsOffset);
    return MessageBundle.EndMessageBundle(builder);
  }

  public static void StartMessageBundle(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddDataFeedMsgs(FlatBufferBuilder builder, VectorOffset dataFeedMsgsOffset) { builder.AddOffset(0, dataFeedMsgsOffset.Value, 0); }
  public static VectorOffset CreateDataFeedMsgsVector(FlatBufferBuilder builder, Offset<solarxr_protocol.data_feed.DataFeedMessageHeader>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDataFeedMsgsVectorBlock(FlatBufferBuilder builder, Offset<solarxr_protocol.data_feed.DataFeedMessageHeader>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDataFeedMsgsVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<solarxr_protocol.data_feed.DataFeedMessageHeader>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDataFeedMsgsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<solarxr_protocol.data_feed.DataFeedMessageHeader>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartDataFeedMsgsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddRpcMsgs(FlatBufferBuilder builder, VectorOffset rpcMsgsOffset) { builder.AddOffset(1, rpcMsgsOffset.Value, 0); }
  public static VectorOffset CreateRpcMsgsVector(FlatBufferBuilder builder, Offset<solarxr_protocol.rpc.RpcMessageHeader>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRpcMsgsVectorBlock(FlatBufferBuilder builder, Offset<solarxr_protocol.rpc.RpcMessageHeader>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRpcMsgsVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<solarxr_protocol.rpc.RpcMessageHeader>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRpcMsgsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<solarxr_protocol.rpc.RpcMessageHeader>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartRpcMsgsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddPubSubMsgs(FlatBufferBuilder builder, VectorOffset pubSubMsgsOffset) { builder.AddOffset(2, pubSubMsgsOffset.Value, 0); }
  public static VectorOffset CreatePubSubMsgsVector(FlatBufferBuilder builder, Offset<solarxr_protocol.pub_sub.PubSubHeader>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreatePubSubMsgsVectorBlock(FlatBufferBuilder builder, Offset<solarxr_protocol.pub_sub.PubSubHeader>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePubSubMsgsVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<solarxr_protocol.pub_sub.PubSubHeader>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePubSubMsgsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<solarxr_protocol.pub_sub.PubSubHeader>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartPubSubMsgsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<solarxr_protocol.MessageBundle> EndMessageBundle(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<solarxr_protocol.MessageBundle>(o);
  }
}


}
