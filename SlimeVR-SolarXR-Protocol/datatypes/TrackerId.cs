// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace solarxr_protocol.datatypes
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct TrackerId : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_22_10_26(); }
  public static TrackerId GetRootAsTrackerId(ByteBuffer _bb) { return GetRootAsTrackerId(_bb, new TrackerId()); }
  public static TrackerId GetRootAsTrackerId(ByteBuffer _bb, TrackerId obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public TrackerId __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// The device the tracker is associated with. If there is no hardware device it is
  /// associated with, this should be `null`.
  public solarxr_protocol.datatypes.DeviceId? DeviceId { get { int o = __p.__offset(4); return o != 0 ? (solarxr_protocol.datatypes.DeviceId?)(new solarxr_protocol.datatypes.DeviceId()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  /// There are possibly multiple trackers per device. This identifies which one.
  public byte TrackerNum { get { int o = __p.__offset(6); return o != 0 ? __p.bb.Get(o + __p.bb_pos) : (byte)0; } }

  public static void StartTrackerId(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddDeviceId(FlatBufferBuilder builder, Offset<solarxr_protocol.datatypes.DeviceId> deviceIdOffset) { builder.AddStruct(0, deviceIdOffset.Value, 0); }
  public static void AddTrackerNum(FlatBufferBuilder builder, byte trackerNum) { builder.AddByte(1, trackerNum, 0); }
  public static Offset<solarxr_protocol.datatypes.TrackerId> EndTrackerId(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<solarxr_protocol.datatypes.TrackerId>(o);
  }
}


}
