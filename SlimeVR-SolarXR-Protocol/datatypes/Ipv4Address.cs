// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace solarxr_protocol.datatypes
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// The 4 bytes of an ip address are stored in 32 bits in big endian order.
/// We will switch over to fixed size arrays when they are supported better.
public struct Ipv4Address : IFlatbufferObject
{
  private Struct __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public void __init(int _i, ByteBuffer _bb) { __p = new Struct(_i, _bb); }
  public Ipv4Address __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public uint Addr { get { return __p.bb.GetUint(__p.bb_pos + 0); } }

  public static Offset<solarxr_protocol.datatypes.Ipv4Address> CreateIpv4Address(FlatBufferBuilder builder, uint Addr) {
    builder.Prep(4, 4);
    builder.PutUint(Addr);
    return new Offset<solarxr_protocol.datatypes.Ipv4Address>(builder.Offset);
  }
}


}
