// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace solarxr_protocol.datatypes
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// To be used inside unions
public struct DeviceIdTable : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_22_10_26(); }
  public static DeviceIdTable GetRootAsDeviceIdTable(ByteBuffer _bb) { return GetRootAsDeviceIdTable(_bb, new DeviceIdTable()); }
  public static DeviceIdTable GetRootAsDeviceIdTable(ByteBuffer _bb, DeviceIdTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public DeviceIdTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public solarxr_protocol.datatypes.DeviceId? Id { get { int o = __p.__offset(4); return o != 0 ? (solarxr_protocol.datatypes.DeviceId?)(new solarxr_protocol.datatypes.DeviceId()).__assign(o + __p.bb_pos, __p.bb) : null; } }

  public static void StartDeviceIdTable(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddId(FlatBufferBuilder builder, Offset<solarxr_protocol.datatypes.DeviceId> idOffset) { builder.AddStruct(0, idOffset.Value, 0); }
  public static Offset<solarxr_protocol.datatypes.DeviceIdTable> EndDeviceIdTable(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<solarxr_protocol.datatypes.DeviceIdTable>(o);
  }
}


}
