// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace solarxr_protocol.datatypes.hardware_info
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// Mostly static info about the device's hardware/firmware.
public struct HardwareInfo : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_22_10_26(); }
  public static HardwareInfo GetRootAsHardwareInfo(ByteBuffer _bb) { return GetRootAsHardwareInfo(_bb, new HardwareInfo()); }
  public static HardwareInfo GetRootAsHardwareInfo(ByteBuffer _bb, HardwareInfo obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public HardwareInfo __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public solarxr_protocol.datatypes.hardware_info.McuType McuId { get { int o = __p.__offset(4); return o != 0 ? (solarxr_protocol.datatypes.hardware_info.McuType)__p.bb.GetUshort(o + __p.bb_pos) : solarxr_protocol.datatypes.hardware_info.McuType.Other; } }
  /// A human-friendly name to display as the name of the device.
  public string DisplayName { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDisplayNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetDisplayNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetDisplayNameArray() { return __p.__vector_as_array<byte>(6); }
  /// A human-friendly string for the device model.
  public string Model { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetModelBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetModelBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetModelArray() { return __p.__vector_as_array<byte>(8); }
  /// A human-friendly string for the manufacturer of the device.
  public string Manufacturer { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetManufacturerBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetManufacturerBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetManufacturerArray() { return __p.__vector_as_array<byte>(10); }
  /// The hardware version of the device. For example, pcb version.
  public string HardwareRevision { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetHardwareRevisionBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetHardwareRevisionBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetHardwareRevisionArray() { return __p.__vector_as_array<byte>(12); }
  /// The version of the slimevr firmware that the device is running.
  public string FirmwareVersion { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetFirmwareVersionBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetFirmwareVersionBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetFirmwareVersionArray() { return __p.__vector_as_array<byte>(14); }
  public solarxr_protocol.datatypes.hardware_info.HardwareAddress? HardwareAddress { get { int o = __p.__offset(16); return o != 0 ? (solarxr_protocol.datatypes.hardware_info.HardwareAddress?)(new solarxr_protocol.datatypes.hardware_info.HardwareAddress()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public solarxr_protocol.datatypes.Ipv4Address? IpAddress { get { int o = __p.__offset(18); return o != 0 ? (solarxr_protocol.datatypes.Ipv4Address?)(new solarxr_protocol.datatypes.Ipv4Address()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  /// A board type string that can be used to name a board. if possible you should use official board type
  public string BoardType { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetBoardTypeBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetBoardTypeBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetBoardTypeArray() { return __p.__vector_as_array<byte>(20); }
  /// An enum listing all the board types supported by the firmware
  public solarxr_protocol.datatypes.hardware_info.BoardType OfficialBoardType { get { int o = __p.__offset(22); return o != 0 ? (solarxr_protocol.datatypes.hardware_info.BoardType)__p.bb.GetUshort(o + __p.bb_pos) : solarxr_protocol.datatypes.hardware_info.BoardType.UNKNOWN; } }
  /// A unique identifier for the device. Depending on the type of device it can be the MAC address,
  /// the IP address, or some other unique identifier like what USB device it is.
  public string HardwareIdentifier { get { int o = __p.__offset(24); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetHardwareIdentifierBytes() { return __p.__vector_as_span<byte>(24, 1); }
#else
  public ArraySegment<byte>? GetHardwareIdentifierBytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public byte[] GetHardwareIdentifierArray() { return __p.__vector_as_array<byte>(24); }
  /// The version of the protocol it's using to communicate with server
  public ushort? NetworkProtocolVersion { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetUshort(o + __p.bb_pos) : (ushort?)null; } }

  public static void StartHardwareInfo(FlatBufferBuilder builder) { builder.StartTable(12); }
  public static void AddMcuId(FlatBufferBuilder builder, solarxr_protocol.datatypes.hardware_info.McuType mcuId) { builder.AddUshort(0, (ushort)mcuId, 0); }
  public static void AddDisplayName(FlatBufferBuilder builder, StringOffset displayNameOffset) { builder.AddOffset(1, displayNameOffset.Value, 0); }
  public static void AddModel(FlatBufferBuilder builder, StringOffset modelOffset) { builder.AddOffset(2, modelOffset.Value, 0); }
  public static void AddManufacturer(FlatBufferBuilder builder, StringOffset manufacturerOffset) { builder.AddOffset(3, manufacturerOffset.Value, 0); }
  public static void AddHardwareRevision(FlatBufferBuilder builder, StringOffset hardwareRevisionOffset) { builder.AddOffset(4, hardwareRevisionOffset.Value, 0); }
  public static void AddFirmwareVersion(FlatBufferBuilder builder, StringOffset firmwareVersionOffset) { builder.AddOffset(5, firmwareVersionOffset.Value, 0); }
  public static void AddHardwareAddress(FlatBufferBuilder builder, Offset<solarxr_protocol.datatypes.hardware_info.HardwareAddress> hardwareAddressOffset) { builder.AddStruct(6, hardwareAddressOffset.Value, 0); }
  public static void AddIpAddress(FlatBufferBuilder builder, Offset<solarxr_protocol.datatypes.Ipv4Address> ipAddressOffset) { builder.AddStruct(7, ipAddressOffset.Value, 0); }
  public static void AddBoardType(FlatBufferBuilder builder, StringOffset boardTypeOffset) { builder.AddOffset(8, boardTypeOffset.Value, 0); }
  public static void AddOfficialBoardType(FlatBufferBuilder builder, solarxr_protocol.datatypes.hardware_info.BoardType officialBoardType) { builder.AddUshort(9, (ushort)officialBoardType, 0); }
  public static void AddHardwareIdentifier(FlatBufferBuilder builder, StringOffset hardwareIdentifierOffset) { builder.AddOffset(10, hardwareIdentifierOffset.Value, 0); }
  public static void AddNetworkProtocolVersion(FlatBufferBuilder builder, ushort? networkProtocolVersion) { builder.AddUshort(11, networkProtocolVersion); }
  public static Offset<solarxr_protocol.datatypes.hardware_info.HardwareInfo> EndHardwareInfo(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<solarxr_protocol.datatypes.hardware_info.HardwareInfo>(o);
  }
}


}
