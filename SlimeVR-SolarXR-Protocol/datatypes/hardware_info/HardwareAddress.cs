// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace solarxr_protocol.datatypes.hardware_info
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// A MAC address or a bluetooth address, or some other uniquely identifying address
/// associated with the endpoint that we are communicating with. If it doesn't take
/// up the full set of bytes, it is aligned towards the least significant bits.
public struct HardwareAddress : IFlatbufferObject
{
  private Struct __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public void __init(int _i, ByteBuffer _bb) { __p = new Struct(_i, _bb); }
  public HardwareAddress __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public ulong Addr { get { return __p.bb.GetUlong(__p.bb_pos + 0); } }

  public static Offset<solarxr_protocol.datatypes.hardware_info.HardwareAddress> CreateHardwareAddress(FlatBufferBuilder builder, ulong Addr) {
    builder.Prep(8, 8);
    builder.PutUlong(Addr);
    return new Offset<solarxr_protocol.datatypes.hardware_info.HardwareAddress>(builder.Offset);
  }
}


}
