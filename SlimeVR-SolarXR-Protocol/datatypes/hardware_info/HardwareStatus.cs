// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace solarxr_protocol.datatypes.hardware_info
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// Mostly-dynamic status info about a tracked device's firmware
public struct HardwareStatus : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_22_10_26(); }
  public static HardwareStatus GetRootAsHardwareStatus(ByteBuffer _bb) { return GetRootAsHardwareStatus(_bb, new HardwareStatus()); }
  public static HardwareStatus GetRootAsHardwareStatus(ByteBuffer _bb, HardwareStatus obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public HardwareStatus __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public solarxr_protocol.datatypes.FirmwareErrorCode? ErrorStatus { get { int o = __p.__offset(4); return o != 0 ? (solarxr_protocol.datatypes.FirmwareErrorCode)__p.bb.Get(o + __p.bb_pos) : (solarxr_protocol.datatypes.FirmwareErrorCode?)null; } }
  public ushort? Ping { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetUshort(o + __p.bb_pos) : (ushort?)null; } }
  /// â€œReceived Signal Strength Indicator" between device and wifi adapter in dBm
  public short? Rssi { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetShort(o + __p.bb_pos) : (short?)null; } }
  /// Temperature in degrees celsius
  public float? McuTemp { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float?)null; } }
  public float? BatteryVoltage { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float?)null; } }
  public byte? BatteryPctEstimate { get { int o = __p.__offset(16); return o != 0 ? __p.bb.Get(o + __p.bb_pos) : (byte?)null; } }
  public solarxr_protocol.datatypes.LogData? LogData { get { int o = __p.__offset(18); return o != 0 ? (solarxr_protocol.datatypes.LogData?)(new solarxr_protocol.datatypes.LogData()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<solarxr_protocol.datatypes.hardware_info.HardwareStatus> CreateHardwareStatus(FlatBufferBuilder builder,
      solarxr_protocol.datatypes.FirmwareErrorCode? error_status = null,
      ushort? ping = null,
      short? rssi = null,
      float? mcu_temp = null,
      float? battery_voltage = null,
      byte? battery_pct_estimate = null,
      Offset<solarxr_protocol.datatypes.LogData> log_dataOffset = default(Offset<solarxr_protocol.datatypes.LogData>)) {
    builder.StartTable(8);
    HardwareStatus.AddLogData(builder, log_dataOffset);
    HardwareStatus.AddBatteryVoltage(builder, battery_voltage);
    HardwareStatus.AddMcuTemp(builder, mcu_temp);
    HardwareStatus.AddRssi(builder, rssi);
    HardwareStatus.AddPing(builder, ping);
    HardwareStatus.AddBatteryPctEstimate(builder, battery_pct_estimate);
    HardwareStatus.AddErrorStatus(builder, error_status);
    return HardwareStatus.EndHardwareStatus(builder);
  }

  public static void StartHardwareStatus(FlatBufferBuilder builder) { builder.StartTable(8); }
  public static void AddErrorStatus(FlatBufferBuilder builder, solarxr_protocol.datatypes.FirmwareErrorCode? errorStatus) { builder.AddByte(0, (byte?)errorStatus); }
  public static void AddPing(FlatBufferBuilder builder, ushort? ping) { builder.AddUshort(2, ping); }
  public static void AddRssi(FlatBufferBuilder builder, short? rssi) { builder.AddShort(3, rssi); }
  public static void AddMcuTemp(FlatBufferBuilder builder, float? mcuTemp) { builder.AddFloat(4, mcuTemp); }
  public static void AddBatteryVoltage(FlatBufferBuilder builder, float? batteryVoltage) { builder.AddFloat(5, batteryVoltage); }
  public static void AddBatteryPctEstimate(FlatBufferBuilder builder, byte? batteryPctEstimate) { builder.AddByte(6, batteryPctEstimate); }
  public static void AddLogData(FlatBufferBuilder builder, Offset<solarxr_protocol.datatypes.LogData> logDataOffset) { builder.AddOffset(7, logDataOffset.Value, 0); }
  public static Offset<solarxr_protocol.datatypes.hardware_info.HardwareStatus> EndHardwareStatus(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<solarxr_protocol.datatypes.hardware_info.HardwareStatus>(o);
  }
}


}
