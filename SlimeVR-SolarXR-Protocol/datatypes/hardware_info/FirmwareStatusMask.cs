// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace solarxr_protocol.datatypes.hardware_info
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// A mask of the data in `FirmwareStatus`
public struct FirmwareStatusMask : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_22_10_26(); }
  public static FirmwareStatusMask GetRootAsFirmwareStatusMask(ByteBuffer _bb) { return GetRootAsFirmwareStatusMask(_bb, new FirmwareStatusMask()); }
  public static FirmwareStatusMask GetRootAsFirmwareStatusMask(ByteBuffer _bb, FirmwareStatusMask obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public FirmwareStatusMask __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public bool ErrorStatus { get { int o = __p.__offset(4); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool Tps { get { int o = __p.__offset(6); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool Ping { get { int o = __p.__offset(8); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool Rssi { get { int o = __p.__offset(10); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool McuTemp { get { int o = __p.__offset(12); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool BatteryVoltage { get { int o = __p.__offset(14); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool BatteryPctEstimate { get { int o = __p.__offset(16); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<solarxr_protocol.datatypes.hardware_info.FirmwareStatusMask> CreateFirmwareStatusMask(FlatBufferBuilder builder,
      bool error_status = false,
      bool tps = false,
      bool ping = false,
      bool rssi = false,
      bool mcu_temp = false,
      bool battery_voltage = false,
      bool battery_pct_estimate = false) {
    builder.StartTable(7);
    FirmwareStatusMask.AddBatteryPctEstimate(builder, battery_pct_estimate);
    FirmwareStatusMask.AddBatteryVoltage(builder, battery_voltage);
    FirmwareStatusMask.AddMcuTemp(builder, mcu_temp);
    FirmwareStatusMask.AddRssi(builder, rssi);
    FirmwareStatusMask.AddPing(builder, ping);
    FirmwareStatusMask.AddTps(builder, tps);
    FirmwareStatusMask.AddErrorStatus(builder, error_status);
    return FirmwareStatusMask.EndFirmwareStatusMask(builder);
  }

  public static void StartFirmwareStatusMask(FlatBufferBuilder builder) { builder.StartTable(7); }
  public static void AddErrorStatus(FlatBufferBuilder builder, bool errorStatus) { builder.AddBool(0, errorStatus, false); }
  public static void AddTps(FlatBufferBuilder builder, bool tps) { builder.AddBool(1, tps, false); }
  public static void AddPing(FlatBufferBuilder builder, bool ping) { builder.AddBool(2, ping, false); }
  public static void AddRssi(FlatBufferBuilder builder, bool rssi) { builder.AddBool(3, rssi, false); }
  public static void AddMcuTemp(FlatBufferBuilder builder, bool mcuTemp) { builder.AddBool(4, mcuTemp, false); }
  public static void AddBatteryVoltage(FlatBufferBuilder builder, bool batteryVoltage) { builder.AddBool(5, batteryVoltage, false); }
  public static void AddBatteryPctEstimate(FlatBufferBuilder builder, bool batteryPctEstimate) { builder.AddBool(6, batteryPctEstimate, false); }
  public static Offset<solarxr_protocol.datatypes.hardware_info.FirmwareStatusMask> EndFirmwareStatusMask(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<solarxr_protocol.datatypes.hardware_info.FirmwareStatusMask>(o);
  }
}


}
