// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace solarxr_protocol.rpc
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// Holds the Server information, this is a basic table holding various information about the currently running server
/// like its local ip address (useful for standalone users so they can specify the ip of the server more easily) and any more
/// infos we might want to add in the future. (like java version, working dir, server version ....)
/// This only holds the local ip for now. But there will be other information added as we chose to display them on the gui for instance
public struct ServerInfosResponse : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_22_10_26(); }
  public static ServerInfosResponse GetRootAsServerInfosResponse(ByteBuffer _bb) { return GetRootAsServerInfosResponse(_bb, new ServerInfosResponse()); }
  public static ServerInfosResponse GetRootAsServerInfosResponse(ByteBuffer _bb, ServerInfosResponse obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ServerInfosResponse __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string LocalIp { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLocalIpBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetLocalIpBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetLocalIpArray() { return __p.__vector_as_array<byte>(4); }

  public static Offset<solarxr_protocol.rpc.ServerInfosResponse> CreateServerInfosResponse(FlatBufferBuilder builder,
      StringOffset localIpOffset = default(StringOffset)) {
    builder.StartTable(1);
    ServerInfosResponse.AddLocalIp(builder, localIpOffset);
    return ServerInfosResponse.EndServerInfosResponse(builder);
  }

  public static void StartServerInfosResponse(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddLocalIp(FlatBufferBuilder builder, StringOffset localIpOffset) { builder.AddOffset(0, localIpOffset.Value, 0); }
  public static Offset<solarxr_protocol.rpc.ServerInfosResponse> EndServerInfosResponse(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<solarxr_protocol.rpc.ServerInfosResponse>(o);
  }
}


}
