// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace solarxr_protocol.rpc
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct AutoBoneEpochResponse : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_22_10_26(); }
  public static AutoBoneEpochResponse GetRootAsAutoBoneEpochResponse(ByteBuffer _bb) { return GetRootAsAutoBoneEpochResponse(_bb, new AutoBoneEpochResponse()); }
  public static AutoBoneEpochResponse GetRootAsAutoBoneEpochResponse(ByteBuffer _bb, AutoBoneEpochResponse obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public AutoBoneEpochResponse __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public uint CurrentEpoch { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public uint TotalEpochs { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  /// The current error value. This can be any positive number, where lower is better.
  public float EpochError { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// A list of the current estimated body proportions.
  public solarxr_protocol.rpc.SkeletonPart? AdjustedSkeletonParts(int j) { int o = __p.__offset(10); return o != 0 ? (solarxr_protocol.rpc.SkeletonPart?)(new solarxr_protocol.rpc.SkeletonPart()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int AdjustedSkeletonPartsLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<solarxr_protocol.rpc.AutoBoneEpochResponse> CreateAutoBoneEpochResponse(FlatBufferBuilder builder,
      uint current_epoch = 0,
      uint total_epochs = 0,
      float epoch_error = 0.0f,
      VectorOffset adjusted_skeleton_partsOffset = default(VectorOffset)) {
    builder.StartTable(4);
    AutoBoneEpochResponse.AddAdjustedSkeletonParts(builder, adjusted_skeleton_partsOffset);
    AutoBoneEpochResponse.AddEpochError(builder, epoch_error);
    AutoBoneEpochResponse.AddTotalEpochs(builder, total_epochs);
    AutoBoneEpochResponse.AddCurrentEpoch(builder, current_epoch);
    return AutoBoneEpochResponse.EndAutoBoneEpochResponse(builder);
  }

  public static void StartAutoBoneEpochResponse(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddCurrentEpoch(FlatBufferBuilder builder, uint currentEpoch) { builder.AddUint(0, currentEpoch, 0); }
  public static void AddTotalEpochs(FlatBufferBuilder builder, uint totalEpochs) { builder.AddUint(1, totalEpochs, 0); }
  public static void AddEpochError(FlatBufferBuilder builder, float epochError) { builder.AddFloat(2, epochError, 0.0f); }
  public static void AddAdjustedSkeletonParts(FlatBufferBuilder builder, VectorOffset adjustedSkeletonPartsOffset) { builder.AddOffset(3, adjustedSkeletonPartsOffset.Value, 0); }
  public static VectorOffset CreateAdjustedSkeletonPartsVector(FlatBufferBuilder builder, Offset<solarxr_protocol.rpc.SkeletonPart>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateAdjustedSkeletonPartsVectorBlock(FlatBufferBuilder builder, Offset<solarxr_protocol.rpc.SkeletonPart>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateAdjustedSkeletonPartsVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<solarxr_protocol.rpc.SkeletonPart>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateAdjustedSkeletonPartsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<solarxr_protocol.rpc.SkeletonPart>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartAdjustedSkeletonPartsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<solarxr_protocol.rpc.AutoBoneEpochResponse> EndAutoBoneEpochResponse(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<solarxr_protocol.rpc.AutoBoneEpochResponse>(o);
  }
}


}
