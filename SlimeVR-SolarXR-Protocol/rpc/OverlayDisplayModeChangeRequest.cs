// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace solarxr_protocol.rpc
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// Changes the state of the overlay's display mode.
public struct OverlayDisplayModeChangeRequest : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_22_10_26(); }
  public static OverlayDisplayModeChangeRequest GetRootAsOverlayDisplayModeChangeRequest(ByteBuffer _bb) { return GetRootAsOverlayDisplayModeChangeRequest(_bb, new OverlayDisplayModeChangeRequest()); }
  public static OverlayDisplayModeChangeRequest GetRootAsOverlayDisplayModeChangeRequest(ByteBuffer _bb, OverlayDisplayModeChangeRequest obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public OverlayDisplayModeChangeRequest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public bool? IsVisible { get { int o = __p.__offset(4); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool?)null; } }
  public bool? IsMirrored { get { int o = __p.__offset(6); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool?)null; } }

  public static Offset<solarxr_protocol.rpc.OverlayDisplayModeChangeRequest> CreateOverlayDisplayModeChangeRequest(FlatBufferBuilder builder,
      bool? is_visible = null,
      bool? is_mirrored = null) {
    builder.StartTable(2);
    OverlayDisplayModeChangeRequest.AddIsMirrored(builder, is_mirrored);
    OverlayDisplayModeChangeRequest.AddIsVisible(builder, is_visible);
    return OverlayDisplayModeChangeRequest.EndOverlayDisplayModeChangeRequest(builder);
  }

  public static void StartOverlayDisplayModeChangeRequest(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddIsVisible(FlatBufferBuilder builder, bool? isVisible) { builder.AddBool(0, isVisible); }
  public static void AddIsMirrored(FlatBufferBuilder builder, bool? isMirrored) { builder.AddBool(1, isMirrored); }
  public static Offset<solarxr_protocol.rpc.OverlayDisplayModeChangeRequest> EndOverlayDisplayModeChangeRequest(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<solarxr_protocol.rpc.OverlayDisplayModeChangeRequest>(o);
  }
}


}
