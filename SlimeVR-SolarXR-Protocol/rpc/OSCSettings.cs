// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace solarxr_protocol.rpc
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// OSC Settings that are used in *any* osc application.
public struct OSCSettings : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_22_10_26(); }
  public static OSCSettings GetRootAsOSCSettings(ByteBuffer _bb) { return GetRootAsOSCSettings(_bb, new OSCSettings()); }
  public static OSCSettings GetRootAsOSCSettings(ByteBuffer _bb, OSCSettings obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public OSCSettings __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public bool Enabled { get { int o = __p.__offset(4); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public ushort PortIn { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetUshort(o + __p.bb_pos) : (ushort)0; } }
  public ushort PortOut { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetUshort(o + __p.bb_pos) : (ushort)0; } }
  public string Address { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAddressBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetAddressBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetAddressArray() { return __p.__vector_as_array<byte>(10); }

  public static Offset<solarxr_protocol.rpc.OSCSettings> CreateOSCSettings(FlatBufferBuilder builder,
      bool enabled = false,
      ushort port_in = 0,
      ushort port_out = 0,
      StringOffset addressOffset = default(StringOffset)) {
    builder.StartTable(4);
    OSCSettings.AddAddress(builder, addressOffset);
    OSCSettings.AddPortOut(builder, port_out);
    OSCSettings.AddPortIn(builder, port_in);
    OSCSettings.AddEnabled(builder, enabled);
    return OSCSettings.EndOSCSettings(builder);
  }

  public static void StartOSCSettings(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddEnabled(FlatBufferBuilder builder, bool enabled) { builder.AddBool(0, enabled, false); }
  public static void AddPortIn(FlatBufferBuilder builder, ushort portIn) { builder.AddUshort(1, portIn, 0); }
  public static void AddPortOut(FlatBufferBuilder builder, ushort portOut) { builder.AddUshort(2, portOut, 0); }
  public static void AddAddress(FlatBufferBuilder builder, StringOffset addressOffset) { builder.AddOffset(3, addressOffset.Value, 0); }
  public static Offset<solarxr_protocol.rpc.OSCSettings> EndOSCSettings(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<solarxr_protocol.rpc.OSCSettings>(o);
  }
}


}
