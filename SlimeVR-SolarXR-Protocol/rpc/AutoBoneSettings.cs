// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace solarxr_protocol.rpc
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// https://github.com/SlimeVR/SlimeVR-Server/blob/v0.8.3/server/src/main/java/dev/slimevr/config/AutoBoneConfig.kt
public struct AutoBoneSettings : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_22_10_26(); }
  public static AutoBoneSettings GetRootAsAutoBoneSettings(ByteBuffer _bb) { return GetRootAsAutoBoneSettings(_bb, new AutoBoneSettings()); }
  public static AutoBoneSettings GetRootAsAutoBoneSettings(ByteBuffer _bb, AutoBoneSettings obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public AutoBoneSettings __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int? CursorIncrement { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int?)null; } }
  public int? MinDataDistance { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int?)null; } }
  public int? MaxDataDistance { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int?)null; } }
  public int? NumEpochs { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int?)null; } }
  public int? PrintEveryNumEpochs { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int?)null; } }
  public float? InitialAdjustRate { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float?)null; } }
  public float? AdjustRateDecay { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float?)null; } }
  public float? SlideErrorFactor { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float?)null; } }
  public float? OffsetSlideErrorFactor { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float?)null; } }
  public float? FootHeightOffsetErrorFactor { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float?)null; } }
  public float? BodyProportionErrorFactor { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float?)null; } }
  public float? HeightErrorFactor { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float?)null; } }
  public float? PositionErrorFactor { get { int o = __p.__offset(28); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float?)null; } }
  public float? PositionOffsetErrorFactor { get { int o = __p.__offset(30); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float?)null; } }
  public bool? CalcInitError { get { int o = __p.__offset(32); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool?)null; } }
  public bool? RandomizeFrameOrder { get { int o = __p.__offset(34); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool?)null; } }
  public bool? ScaleEachStep { get { int o = __p.__offset(36); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool?)null; } }
  public int? SampleCount { get { int o = __p.__offset(38); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int?)null; } }
  public long? SampleRateMs { get { int o = __p.__offset(40); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long?)null; } }
  public bool? SaveRecordings { get { int o = __p.__offset(42); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool?)null; } }
  public bool? UseSkeletonHeight { get { int o = __p.__offset(44); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool?)null; } }
  public long? RandSeed { get { int o = __p.__offset(46); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long?)null; } }

  public static Offset<solarxr_protocol.rpc.AutoBoneSettings> CreateAutoBoneSettings(FlatBufferBuilder builder,
      int? cursor_increment = null,
      int? min_data_distance = null,
      int? max_data_distance = null,
      int? num_epochs = null,
      int? print_every_num_epochs = null,
      float? initial_adjust_rate = null,
      float? adjust_rate_decay = null,
      float? slide_error_factor = null,
      float? offset_slide_error_factor = null,
      float? foot_height_offset_error_factor = null,
      float? body_proportion_error_factor = null,
      float? height_error_factor = null,
      float? position_error_factor = null,
      float? position_offset_error_factor = null,
      bool? calc_init_error = null,
      bool? randomize_frame_order = null,
      bool? scale_each_step = null,
      int? sample_count = null,
      long? sample_rate_ms = null,
      bool? save_recordings = null,
      bool? use_skeleton_height = null,
      long? rand_seed = null) {
    builder.StartTable(22);
    AutoBoneSettings.AddRandSeed(builder, rand_seed);
    AutoBoneSettings.AddSampleRateMs(builder, sample_rate_ms);
    AutoBoneSettings.AddSampleCount(builder, sample_count);
    AutoBoneSettings.AddPositionOffsetErrorFactor(builder, position_offset_error_factor);
    AutoBoneSettings.AddPositionErrorFactor(builder, position_error_factor);
    AutoBoneSettings.AddHeightErrorFactor(builder, height_error_factor);
    AutoBoneSettings.AddBodyProportionErrorFactor(builder, body_proportion_error_factor);
    AutoBoneSettings.AddFootHeightOffsetErrorFactor(builder, foot_height_offset_error_factor);
    AutoBoneSettings.AddOffsetSlideErrorFactor(builder, offset_slide_error_factor);
    AutoBoneSettings.AddSlideErrorFactor(builder, slide_error_factor);
    AutoBoneSettings.AddAdjustRateDecay(builder, adjust_rate_decay);
    AutoBoneSettings.AddInitialAdjustRate(builder, initial_adjust_rate);
    AutoBoneSettings.AddPrintEveryNumEpochs(builder, print_every_num_epochs);
    AutoBoneSettings.AddNumEpochs(builder, num_epochs);
    AutoBoneSettings.AddMaxDataDistance(builder, max_data_distance);
    AutoBoneSettings.AddMinDataDistance(builder, min_data_distance);
    AutoBoneSettings.AddCursorIncrement(builder, cursor_increment);
    AutoBoneSettings.AddUseSkeletonHeight(builder, use_skeleton_height);
    AutoBoneSettings.AddSaveRecordings(builder, save_recordings);
    AutoBoneSettings.AddScaleEachStep(builder, scale_each_step);
    AutoBoneSettings.AddRandomizeFrameOrder(builder, randomize_frame_order);
    AutoBoneSettings.AddCalcInitError(builder, calc_init_error);
    return AutoBoneSettings.EndAutoBoneSettings(builder);
  }

  public static void StartAutoBoneSettings(FlatBufferBuilder builder) { builder.StartTable(22); }
  public static void AddCursorIncrement(FlatBufferBuilder builder, int? cursorIncrement) { builder.AddInt(0, cursorIncrement); }
  public static void AddMinDataDistance(FlatBufferBuilder builder, int? minDataDistance) { builder.AddInt(1, minDataDistance); }
  public static void AddMaxDataDistance(FlatBufferBuilder builder, int? maxDataDistance) { builder.AddInt(2, maxDataDistance); }
  public static void AddNumEpochs(FlatBufferBuilder builder, int? numEpochs) { builder.AddInt(3, numEpochs); }
  public static void AddPrintEveryNumEpochs(FlatBufferBuilder builder, int? printEveryNumEpochs) { builder.AddInt(4, printEveryNumEpochs); }
  public static void AddInitialAdjustRate(FlatBufferBuilder builder, float? initialAdjustRate) { builder.AddFloat(5, initialAdjustRate); }
  public static void AddAdjustRateDecay(FlatBufferBuilder builder, float? adjustRateDecay) { builder.AddFloat(6, adjustRateDecay); }
  public static void AddSlideErrorFactor(FlatBufferBuilder builder, float? slideErrorFactor) { builder.AddFloat(7, slideErrorFactor); }
  public static void AddOffsetSlideErrorFactor(FlatBufferBuilder builder, float? offsetSlideErrorFactor) { builder.AddFloat(8, offsetSlideErrorFactor); }
  public static void AddFootHeightOffsetErrorFactor(FlatBufferBuilder builder, float? footHeightOffsetErrorFactor) { builder.AddFloat(9, footHeightOffsetErrorFactor); }
  public static void AddBodyProportionErrorFactor(FlatBufferBuilder builder, float? bodyProportionErrorFactor) { builder.AddFloat(10, bodyProportionErrorFactor); }
  public static void AddHeightErrorFactor(FlatBufferBuilder builder, float? heightErrorFactor) { builder.AddFloat(11, heightErrorFactor); }
  public static void AddPositionErrorFactor(FlatBufferBuilder builder, float? positionErrorFactor) { builder.AddFloat(12, positionErrorFactor); }
  public static void AddPositionOffsetErrorFactor(FlatBufferBuilder builder, float? positionOffsetErrorFactor) { builder.AddFloat(13, positionOffsetErrorFactor); }
  public static void AddCalcInitError(FlatBufferBuilder builder, bool? calcInitError) { builder.AddBool(14, calcInitError); }
  public static void AddRandomizeFrameOrder(FlatBufferBuilder builder, bool? randomizeFrameOrder) { builder.AddBool(15, randomizeFrameOrder); }
  public static void AddScaleEachStep(FlatBufferBuilder builder, bool? scaleEachStep) { builder.AddBool(16, scaleEachStep); }
  public static void AddSampleCount(FlatBufferBuilder builder, int? sampleCount) { builder.AddInt(17, sampleCount); }
  public static void AddSampleRateMs(FlatBufferBuilder builder, long? sampleRateMs) { builder.AddLong(18, sampleRateMs); }
  public static void AddSaveRecordings(FlatBufferBuilder builder, bool? saveRecordings) { builder.AddBool(19, saveRecordings); }
  public static void AddUseSkeletonHeight(FlatBufferBuilder builder, bool? useSkeletonHeight) { builder.AddBool(20, useSkeletonHeight); }
  public static void AddRandSeed(FlatBufferBuilder builder, long? randSeed) { builder.AddLong(21, randSeed); }
  public static Offset<solarxr_protocol.rpc.AutoBoneSettings> EndAutoBoneSettings(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<solarxr_protocol.rpc.AutoBoneSettings>(o);
  }
}


}
