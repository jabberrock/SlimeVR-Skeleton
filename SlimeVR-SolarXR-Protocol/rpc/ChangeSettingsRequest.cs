// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace solarxr_protocol.rpc
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct ChangeSettingsRequest : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_22_10_26(); }
  public static ChangeSettingsRequest GetRootAsChangeSettingsRequest(ByteBuffer _bb) { return GetRootAsChangeSettingsRequest(_bb, new ChangeSettingsRequest()); }
  public static ChangeSettingsRequest GetRootAsChangeSettingsRequest(ByteBuffer _bb, ChangeSettingsRequest obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ChangeSettingsRequest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public solarxr_protocol.rpc.SteamVRTrackersSetting? SteamVrTrackers { get { int o = __p.__offset(4); return o != 0 ? (solarxr_protocol.rpc.SteamVRTrackersSetting?)(new solarxr_protocol.rpc.SteamVRTrackersSetting()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public solarxr_protocol.rpc.FilteringSettings? Filtering { get { int o = __p.__offset(6); return o != 0 ? (solarxr_protocol.rpc.FilteringSettings?)(new solarxr_protocol.rpc.FilteringSettings()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public solarxr_protocol.rpc.DriftCompensationSettings? DriftCompensation { get { int o = __p.__offset(8); return o != 0 ? (solarxr_protocol.rpc.DriftCompensationSettings?)(new solarxr_protocol.rpc.DriftCompensationSettings()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public solarxr_protocol.rpc.OSCRouterSettings? OscRouter { get { int o = __p.__offset(10); return o != 0 ? (solarxr_protocol.rpc.OSCRouterSettings?)(new solarxr_protocol.rpc.OSCRouterSettings()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public solarxr_protocol.rpc.VRCOSCSettings? VrcOsc { get { int o = __p.__offset(12); return o != 0 ? (solarxr_protocol.rpc.VRCOSCSettings?)(new solarxr_protocol.rpc.VRCOSCSettings()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public solarxr_protocol.rpc.VMCOSCSettings? VmcOsc { get { int o = __p.__offset(14); return o != 0 ? (solarxr_protocol.rpc.VMCOSCSettings?)(new solarxr_protocol.rpc.VMCOSCSettings()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public solarxr_protocol.rpc.settings.ModelSettings? ModelSettings { get { int o = __p.__offset(16); return o != 0 ? (solarxr_protocol.rpc.settings.ModelSettings?)(new solarxr_protocol.rpc.settings.ModelSettings()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public solarxr_protocol.rpc.TapDetectionSettings? TapDetectionSettings { get { int o = __p.__offset(18); return o != 0 ? (solarxr_protocol.rpc.TapDetectionSettings?)(new solarxr_protocol.rpc.TapDetectionSettings()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public solarxr_protocol.rpc.AutoBoneSettings? AutoBoneSettings { get { int o = __p.__offset(20); return o != 0 ? (solarxr_protocol.rpc.AutoBoneSettings?)(new solarxr_protocol.rpc.AutoBoneSettings()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public solarxr_protocol.rpc.ResetsSettings? ResetsSettings { get { int o = __p.__offset(22); return o != 0 ? (solarxr_protocol.rpc.ResetsSettings?)(new solarxr_protocol.rpc.ResetsSettings()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public solarxr_protocol.rpc.YawCorrectionSettings? YawCorrectionSettings { get { int o = __p.__offset(24); return o != 0 ? (solarxr_protocol.rpc.YawCorrectionSettings?)(new solarxr_protocol.rpc.YawCorrectionSettings()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<solarxr_protocol.rpc.ChangeSettingsRequest> CreateChangeSettingsRequest(FlatBufferBuilder builder,
      Offset<solarxr_protocol.rpc.SteamVRTrackersSetting> steam_vr_trackersOffset = default(Offset<solarxr_protocol.rpc.SteamVRTrackersSetting>),
      Offset<solarxr_protocol.rpc.FilteringSettings> filteringOffset = default(Offset<solarxr_protocol.rpc.FilteringSettings>),
      Offset<solarxr_protocol.rpc.DriftCompensationSettings> drift_compensationOffset = default(Offset<solarxr_protocol.rpc.DriftCompensationSettings>),
      Offset<solarxr_protocol.rpc.OSCRouterSettings> osc_routerOffset = default(Offset<solarxr_protocol.rpc.OSCRouterSettings>),
      Offset<solarxr_protocol.rpc.VRCOSCSettings> vrc_oscOffset = default(Offset<solarxr_protocol.rpc.VRCOSCSettings>),
      Offset<solarxr_protocol.rpc.VMCOSCSettings> vmc_oscOffset = default(Offset<solarxr_protocol.rpc.VMCOSCSettings>),
      Offset<solarxr_protocol.rpc.settings.ModelSettings> model_settingsOffset = default(Offset<solarxr_protocol.rpc.settings.ModelSettings>),
      Offset<solarxr_protocol.rpc.TapDetectionSettings> tap_detection_settingsOffset = default(Offset<solarxr_protocol.rpc.TapDetectionSettings>),
      Offset<solarxr_protocol.rpc.AutoBoneSettings> auto_bone_settingsOffset = default(Offset<solarxr_protocol.rpc.AutoBoneSettings>),
      Offset<solarxr_protocol.rpc.ResetsSettings> resets_settingsOffset = default(Offset<solarxr_protocol.rpc.ResetsSettings>),
      Offset<solarxr_protocol.rpc.YawCorrectionSettings> yaw_correction_settingsOffset = default(Offset<solarxr_protocol.rpc.YawCorrectionSettings>)) {
    builder.StartTable(11);
    ChangeSettingsRequest.AddYawCorrectionSettings(builder, yaw_correction_settingsOffset);
    ChangeSettingsRequest.AddResetsSettings(builder, resets_settingsOffset);
    ChangeSettingsRequest.AddAutoBoneSettings(builder, auto_bone_settingsOffset);
    ChangeSettingsRequest.AddTapDetectionSettings(builder, tap_detection_settingsOffset);
    ChangeSettingsRequest.AddModelSettings(builder, model_settingsOffset);
    ChangeSettingsRequest.AddVmcOsc(builder, vmc_oscOffset);
    ChangeSettingsRequest.AddVrcOsc(builder, vrc_oscOffset);
    ChangeSettingsRequest.AddOscRouter(builder, osc_routerOffset);
    ChangeSettingsRequest.AddDriftCompensation(builder, drift_compensationOffset);
    ChangeSettingsRequest.AddFiltering(builder, filteringOffset);
    ChangeSettingsRequest.AddSteamVrTrackers(builder, steam_vr_trackersOffset);
    return ChangeSettingsRequest.EndChangeSettingsRequest(builder);
  }

  public static void StartChangeSettingsRequest(FlatBufferBuilder builder) { builder.StartTable(11); }
  public static void AddSteamVrTrackers(FlatBufferBuilder builder, Offset<solarxr_protocol.rpc.SteamVRTrackersSetting> steamVrTrackersOffset) { builder.AddOffset(0, steamVrTrackersOffset.Value, 0); }
  public static void AddFiltering(FlatBufferBuilder builder, Offset<solarxr_protocol.rpc.FilteringSettings> filteringOffset) { builder.AddOffset(1, filteringOffset.Value, 0); }
  public static void AddDriftCompensation(FlatBufferBuilder builder, Offset<solarxr_protocol.rpc.DriftCompensationSettings> driftCompensationOffset) { builder.AddOffset(2, driftCompensationOffset.Value, 0); }
  public static void AddOscRouter(FlatBufferBuilder builder, Offset<solarxr_protocol.rpc.OSCRouterSettings> oscRouterOffset) { builder.AddOffset(3, oscRouterOffset.Value, 0); }
  public static void AddVrcOsc(FlatBufferBuilder builder, Offset<solarxr_protocol.rpc.VRCOSCSettings> vrcOscOffset) { builder.AddOffset(4, vrcOscOffset.Value, 0); }
  public static void AddVmcOsc(FlatBufferBuilder builder, Offset<solarxr_protocol.rpc.VMCOSCSettings> vmcOscOffset) { builder.AddOffset(5, vmcOscOffset.Value, 0); }
  public static void AddModelSettings(FlatBufferBuilder builder, Offset<solarxr_protocol.rpc.settings.ModelSettings> modelSettingsOffset) { builder.AddOffset(6, modelSettingsOffset.Value, 0); }
  public static void AddTapDetectionSettings(FlatBufferBuilder builder, Offset<solarxr_protocol.rpc.TapDetectionSettings> tapDetectionSettingsOffset) { builder.AddOffset(7, tapDetectionSettingsOffset.Value, 0); }
  public static void AddAutoBoneSettings(FlatBufferBuilder builder, Offset<solarxr_protocol.rpc.AutoBoneSettings> autoBoneSettingsOffset) { builder.AddOffset(8, autoBoneSettingsOffset.Value, 0); }
  public static void AddResetsSettings(FlatBufferBuilder builder, Offset<solarxr_protocol.rpc.ResetsSettings> resetsSettingsOffset) { builder.AddOffset(9, resetsSettingsOffset.Value, 0); }
  public static void AddYawCorrectionSettings(FlatBufferBuilder builder, Offset<solarxr_protocol.rpc.YawCorrectionSettings> yawCorrectionSettingsOffset) { builder.AddOffset(10, yawCorrectionSettingsOffset.Value, 0); }
  public static Offset<solarxr_protocol.rpc.ChangeSettingsRequest> EndChangeSettingsRequest(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<solarxr_protocol.rpc.ChangeSettingsRequest>(o);
  }
}


}
