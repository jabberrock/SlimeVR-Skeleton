// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace solarxr_protocol.rpc
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct OTAFirmwareUpdate : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_22_10_26(); }
  public static OTAFirmwareUpdate GetRootAsOTAFirmwareUpdate(ByteBuffer _bb) { return GetRootAsOTAFirmwareUpdate(_bb, new OTAFirmwareUpdate()); }
  public static OTAFirmwareUpdate GetRootAsOTAFirmwareUpdate(ByteBuffer _bb, OTAFirmwareUpdate obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public OTAFirmwareUpdate __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// id of the device, this refer to the actual DeviceId from the protocol
  public solarxr_protocol.datatypes.DeviceId? DeviceId { get { int o = __p.__offset(4); return o != 0 ? (solarxr_protocol.datatypes.DeviceId?)(new solarxr_protocol.datatypes.DeviceId()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  /// A table containing the url and offset of the firmware bin file
  public solarxr_protocol.rpc.FirmwarePart? FirmwarePart { get { int o = __p.__offset(6); return o != 0 ? (solarxr_protocol.rpc.FirmwarePart?)(new solarxr_protocol.rpc.FirmwarePart()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static void StartOTAFirmwareUpdate(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddDeviceId(FlatBufferBuilder builder, Offset<solarxr_protocol.datatypes.DeviceId> deviceIdOffset) { builder.AddStruct(0, deviceIdOffset.Value, 0); }
  public static void AddFirmwarePart(FlatBufferBuilder builder, Offset<solarxr_protocol.rpc.FirmwarePart> firmwarePartOffset) { builder.AddOffset(1, firmwarePartOffset.Value, 0); }
  public static Offset<solarxr_protocol.rpc.OTAFirmwareUpdate> EndOTAFirmwareUpdate(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<solarxr_protocol.rpc.OTAFirmwareUpdate>(o);
  }
}


}
