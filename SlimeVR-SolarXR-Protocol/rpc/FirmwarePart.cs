// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace solarxr_protocol.rpc
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct FirmwarePart : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_22_10_26(); }
  public static FirmwarePart GetRootAsFirmwarePart(ByteBuffer _bb) { return GetRootAsFirmwarePart(_bb, new FirmwarePart()); }
  public static FirmwarePart GetRootAsFirmwarePart(ByteBuffer _bb, FirmwarePart obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public FirmwarePart __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Url of the firmware bin to download
  public string Url { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetUrlBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetUrlBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetUrlArray() { return __p.__vector_as_array<byte>(4); }
  /// Offset of the firmware, used when flashing to the mcu, it indicates where to write this file in memory
  /// Will be ignored in the case of OTA flashing
  public uint Offset { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }

  public static Offset<solarxr_protocol.rpc.FirmwarePart> CreateFirmwarePart(FlatBufferBuilder builder,
      StringOffset urlOffset = default(StringOffset),
      uint offset = 0) {
    builder.StartTable(2);
    FirmwarePart.AddOffset(builder, offset);
    FirmwarePart.AddUrl(builder, urlOffset);
    return FirmwarePart.EndFirmwarePart(builder);
  }

  public static void StartFirmwarePart(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddUrl(FlatBufferBuilder builder, StringOffset urlOffset) { builder.AddOffset(0, urlOffset.Value, 0); }
  public static void AddOffset(FlatBufferBuilder builder, uint offset) { builder.AddUint(1, offset, 0); }
  public static Offset<solarxr_protocol.rpc.FirmwarePart> EndFirmwarePart(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<solarxr_protocol.rpc.FirmwarePart>(o);
  }
}


}
