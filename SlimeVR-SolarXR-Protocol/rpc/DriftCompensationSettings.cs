// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace solarxr_protocol.rpc
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// Settings related to IMU yaw drift compensation
public struct DriftCompensationSettings : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_22_10_26(); }
  public static DriftCompensationSettings GetRootAsDriftCompensationSettings(ByteBuffer _bb) { return GetRootAsDriftCompensationSettings(_bb, new DriftCompensationSettings()); }
  public static DriftCompensationSettings GetRootAsDriftCompensationSettings(ByteBuffer _bb, DriftCompensationSettings obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public DriftCompensationSettings __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public bool Enabled { get { int o = __p.__offset(4); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool Prediction { get { int o = __p.__offset(6); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  /// 0 to 1. A higher value results in more yaw drift compensation
  public float Amount { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// Number of previous resets to take into account when calculating yaw drift
  public ushort MaxResets { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetUshort(o + __p.bb_pos) : (ushort)0; } }

  public static Offset<solarxr_protocol.rpc.DriftCompensationSettings> CreateDriftCompensationSettings(FlatBufferBuilder builder,
      bool enabled = false,
      bool prediction = false,
      float amount = 0.0f,
      ushort max_resets = 0) {
    builder.StartTable(4);
    DriftCompensationSettings.AddAmount(builder, amount);
    DriftCompensationSettings.AddMaxResets(builder, max_resets);
    DriftCompensationSettings.AddPrediction(builder, prediction);
    DriftCompensationSettings.AddEnabled(builder, enabled);
    return DriftCompensationSettings.EndDriftCompensationSettings(builder);
  }

  public static void StartDriftCompensationSettings(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddEnabled(FlatBufferBuilder builder, bool enabled) { builder.AddBool(0, enabled, false); }
  public static void AddPrediction(FlatBufferBuilder builder, bool prediction) { builder.AddBool(1, prediction, false); }
  public static void AddAmount(FlatBufferBuilder builder, float amount) { builder.AddFloat(2, amount, 0.0f); }
  public static void AddMaxResets(FlatBufferBuilder builder, ushort maxResets) { builder.AddUshort(3, maxResets, 0); }
  public static Offset<solarxr_protocol.rpc.DriftCompensationSettings> EndDriftCompensationSettings(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<solarxr_protocol.rpc.DriftCompensationSettings>(o);
  }
}


}
