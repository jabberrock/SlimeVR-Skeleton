// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace solarxr_protocol.rpc
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// Used for the server to save a file and have it prompt in the user side
public struct SaveFileNotification : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_22_10_26(); }
  public static SaveFileNotification GetRootAsSaveFileNotification(ByteBuffer _bb) { return GetRootAsSaveFileNotification(_bb, new SaveFileNotification()); }
  public static SaveFileNotification GetRootAsSaveFileNotification(ByteBuffer _bb, SaveFileNotification obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SaveFileNotification __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Binary data of the file
  public byte Data(int j) { int o = __p.__offset(4); return o != 0 ? __p.bb.Get(__p.__vector(o) + j * 1) : (byte)0; }
  public int DataLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDataBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetDataBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetDataArray() { return __p.__vector_as_array<byte>(4); }
  /// MIME type of file if one exists, use `file_extension` otherwise
  public string MimeType { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMimeTypeBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetMimeTypeBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetMimeTypeArray() { return __p.__vector_as_array<byte>(6); }
  /// Use MIME type preferably if one exists
  public string FileExtension { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetFileExtensionBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetFileExtensionBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetFileExtensionArray() { return __p.__vector_as_array<byte>(8); }
  /// Directory recommended to save the file on
  public solarxr_protocol.rpc.ComputerDirectory? ExpectedDir { get { int o = __p.__offset(10); return o != 0 ? (solarxr_protocol.rpc.ComputerDirectory)__p.bb.Get(o + __p.bb_pos) : (solarxr_protocol.rpc.ComputerDirectory?)null; } }
  /// Recommended filename
  public string ExpectedFilename { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetExpectedFilenameBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetExpectedFilenameBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetExpectedFilenameArray() { return __p.__vector_as_array<byte>(12); }

  public static Offset<solarxr_protocol.rpc.SaveFileNotification> CreateSaveFileNotification(FlatBufferBuilder builder,
      VectorOffset dataOffset = default(VectorOffset),
      StringOffset mime_typeOffset = default(StringOffset),
      StringOffset file_extensionOffset = default(StringOffset),
      solarxr_protocol.rpc.ComputerDirectory? expected_dir = null,
      StringOffset expected_filenameOffset = default(StringOffset)) {
    builder.StartTable(5);
    SaveFileNotification.AddExpectedFilename(builder, expected_filenameOffset);
    SaveFileNotification.AddFileExtension(builder, file_extensionOffset);
    SaveFileNotification.AddMimeType(builder, mime_typeOffset);
    SaveFileNotification.AddData(builder, dataOffset);
    SaveFileNotification.AddExpectedDir(builder, expected_dir);
    return SaveFileNotification.EndSaveFileNotification(builder);
  }

  public static void StartSaveFileNotification(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddData(FlatBufferBuilder builder, VectorOffset dataOffset) { builder.AddOffset(0, dataOffset.Value, 0); }
  public static VectorOffset CreateDataVector(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddByte(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateDataVectorBlock(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDataVectorBlock(FlatBufferBuilder builder, ArraySegment<byte> data) { builder.StartVector(1, data.Count, 1); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDataVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<byte>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartDataVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
  public static void AddMimeType(FlatBufferBuilder builder, StringOffset mimeTypeOffset) { builder.AddOffset(1, mimeTypeOffset.Value, 0); }
  public static void AddFileExtension(FlatBufferBuilder builder, StringOffset fileExtensionOffset) { builder.AddOffset(2, fileExtensionOffset.Value, 0); }
  public static void AddExpectedDir(FlatBufferBuilder builder, solarxr_protocol.rpc.ComputerDirectory? expectedDir) { builder.AddByte(3, (byte?)expectedDir); }
  public static void AddExpectedFilename(FlatBufferBuilder builder, StringOffset expectedFilenameOffset) { builder.AddOffset(4, expectedFilenameOffset.Value, 0); }
  public static Offset<solarxr_protocol.rpc.SaveFileNotification> EndSaveFileNotification(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<solarxr_protocol.rpc.SaveFileNotification>(o);
  }
}


}
