// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace solarxr_protocol.rpc
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// Returns the current min and max positional tracker heights
public struct HeightResponse : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_22_10_26(); }
  public static HeightResponse GetRootAsHeightResponse(ByteBuffer _bb) { return GetRootAsHeightResponse(_bb, new HeightResponse()); }
  public static HeightResponse GetRootAsHeightResponse(ByteBuffer _bb, HeightResponse obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public HeightResponse __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public float MinHeight { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float MaxHeight { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }

  public static Offset<solarxr_protocol.rpc.HeightResponse> CreateHeightResponse(FlatBufferBuilder builder,
      float min_height = 0.0f,
      float max_height = 0.0f) {
    builder.StartTable(2);
    HeightResponse.AddMaxHeight(builder, max_height);
    HeightResponse.AddMinHeight(builder, min_height);
    return HeightResponse.EndHeightResponse(builder);
  }

  public static void StartHeightResponse(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddMinHeight(FlatBufferBuilder builder, float minHeight) { builder.AddFloat(0, minHeight, 0.0f); }
  public static void AddMaxHeight(FlatBufferBuilder builder, float maxHeight) { builder.AddFloat(1, maxHeight, 0.0f); }
  public static Offset<solarxr_protocol.rpc.HeightResponse> EndHeightResponse(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<solarxr_protocol.rpc.HeightResponse>(o);
  }
}


}
