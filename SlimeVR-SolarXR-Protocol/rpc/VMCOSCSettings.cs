// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace solarxr_protocol.rpc
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// OSC Settings specific to VMC
public struct VMCOSCSettings : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_22_10_26(); }
  public static VMCOSCSettings GetRootAsVMCOSCSettings(ByteBuffer _bb) { return GetRootAsVMCOSCSettings(_bb, new VMCOSCSettings()); }
  public static VMCOSCSettings GetRootAsVMCOSCSettings(ByteBuffer _bb, VMCOSCSettings obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public VMCOSCSettings __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public solarxr_protocol.rpc.OSCSettings? OscSettings { get { int o = __p.__offset(4); return o != 0 ? (solarxr_protocol.rpc.OSCSettings?)(new solarxr_protocol.rpc.OSCSettings()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public string VrmJson { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetVrmJsonBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetVrmJsonBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetVrmJsonArray() { return __p.__vector_as_array<byte>(6); }
  public bool AnchorHip { get { int o = __p.__offset(8); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool MirrorTracking { get { int o = __p.__offset(10); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<solarxr_protocol.rpc.VMCOSCSettings> CreateVMCOSCSettings(FlatBufferBuilder builder,
      Offset<solarxr_protocol.rpc.OSCSettings> osc_settingsOffset = default(Offset<solarxr_protocol.rpc.OSCSettings>),
      StringOffset vrm_jsonOffset = default(StringOffset),
      bool anchor_hip = false,
      bool mirror_tracking = false) {
    builder.StartTable(4);
    VMCOSCSettings.AddVrmJson(builder, vrm_jsonOffset);
    VMCOSCSettings.AddOscSettings(builder, osc_settingsOffset);
    VMCOSCSettings.AddMirrorTracking(builder, mirror_tracking);
    VMCOSCSettings.AddAnchorHip(builder, anchor_hip);
    return VMCOSCSettings.EndVMCOSCSettings(builder);
  }

  public static void StartVMCOSCSettings(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddOscSettings(FlatBufferBuilder builder, Offset<solarxr_protocol.rpc.OSCSettings> oscSettingsOffset) { builder.AddOffset(0, oscSettingsOffset.Value, 0); }
  public static void AddVrmJson(FlatBufferBuilder builder, StringOffset vrmJsonOffset) { builder.AddOffset(1, vrmJsonOffset.Value, 0); }
  public static void AddAnchorHip(FlatBufferBuilder builder, bool anchorHip) { builder.AddBool(2, anchorHip, false); }
  public static void AddMirrorTracking(FlatBufferBuilder builder, bool mirrorTracking) { builder.AddBool(3, mirrorTracking, false); }
  public static Offset<solarxr_protocol.rpc.VMCOSCSettings> EndVMCOSCSettings(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<solarxr_protocol.rpc.VMCOSCSettings>(o);
  }
}


}
