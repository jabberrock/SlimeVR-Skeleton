// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace solarxr_protocol.rpc
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct SerialFirmwareUpdate : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_22_10_26(); }
  public static SerialFirmwareUpdate GetRootAsSerialFirmwareUpdate(ByteBuffer _bb) { return GetRootAsSerialFirmwareUpdate(_bb, new SerialFirmwareUpdate()); }
  public static SerialFirmwareUpdate GetRootAsSerialFirmwareUpdate(ByteBuffer _bb, SerialFirmwareUpdate obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SerialFirmwareUpdate __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// id of the device, this refer to a serial port id
  public solarxr_protocol.rpc.SerialDevicePort? DeviceId { get { int o = __p.__offset(4); return o != 0 ? (solarxr_protocol.rpc.SerialDevicePort?)(new solarxr_protocol.rpc.SerialDevicePort()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  /// Will make the server ask for the tracker to be manually rebooted by the user
  /// after the tracker is done flashing
  public bool NeedManualReboot { get { int o = __p.__offset(6); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  /// Credentials to provision after the flashing
  /// Only used with Serial flashing, because OTA is already connected to the wifi
  public string Ssid { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSsidBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetSsidBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetSsidArray() { return __p.__vector_as_array<byte>(8); }
  public string Password { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPasswordBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetPasswordBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetPasswordArray() { return __p.__vector_as_array<byte>(10); }
  /// A list of urls and offsets of the different firmware files to flash
  public solarxr_protocol.rpc.FirmwarePart? FirmwarePart(int j) { int o = __p.__offset(12); return o != 0 ? (solarxr_protocol.rpc.FirmwarePart?)(new solarxr_protocol.rpc.FirmwarePart()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int FirmwarePartLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<solarxr_protocol.rpc.SerialFirmwareUpdate> CreateSerialFirmwareUpdate(FlatBufferBuilder builder,
      Offset<solarxr_protocol.rpc.SerialDevicePort> device_idOffset = default(Offset<solarxr_protocol.rpc.SerialDevicePort>),
      bool needManualReboot = false,
      StringOffset ssidOffset = default(StringOffset),
      StringOffset passwordOffset = default(StringOffset),
      VectorOffset firmware_partOffset = default(VectorOffset)) {
    builder.StartTable(5);
    SerialFirmwareUpdate.AddFirmwarePart(builder, firmware_partOffset);
    SerialFirmwareUpdate.AddPassword(builder, passwordOffset);
    SerialFirmwareUpdate.AddSsid(builder, ssidOffset);
    SerialFirmwareUpdate.AddDeviceId(builder, device_idOffset);
    SerialFirmwareUpdate.AddNeedManualReboot(builder, needManualReboot);
    return SerialFirmwareUpdate.EndSerialFirmwareUpdate(builder);
  }

  public static void StartSerialFirmwareUpdate(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddDeviceId(FlatBufferBuilder builder, Offset<solarxr_protocol.rpc.SerialDevicePort> deviceIdOffset) { builder.AddOffset(0, deviceIdOffset.Value, 0); }
  public static void AddNeedManualReboot(FlatBufferBuilder builder, bool needManualReboot) { builder.AddBool(1, needManualReboot, false); }
  public static void AddSsid(FlatBufferBuilder builder, StringOffset ssidOffset) { builder.AddOffset(2, ssidOffset.Value, 0); }
  public static void AddPassword(FlatBufferBuilder builder, StringOffset passwordOffset) { builder.AddOffset(3, passwordOffset.Value, 0); }
  public static void AddFirmwarePart(FlatBufferBuilder builder, VectorOffset firmwarePartOffset) { builder.AddOffset(4, firmwarePartOffset.Value, 0); }
  public static VectorOffset CreateFirmwarePartVector(FlatBufferBuilder builder, Offset<solarxr_protocol.rpc.FirmwarePart>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateFirmwarePartVectorBlock(FlatBufferBuilder builder, Offset<solarxr_protocol.rpc.FirmwarePart>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateFirmwarePartVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<solarxr_protocol.rpc.FirmwarePart>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateFirmwarePartVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<solarxr_protocol.rpc.FirmwarePart>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartFirmwarePartVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<solarxr_protocol.rpc.SerialFirmwareUpdate> EndSerialFirmwareUpdate(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<solarxr_protocol.rpc.SerialFirmwareUpdate>(o);
  }
}


}
