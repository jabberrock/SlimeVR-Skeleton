// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace solarxr_protocol.rpc
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// An status is some kind of warning sent by the server, it's mainly made for
/// showing problems with the server and need attention from the user.
public struct StatusMessage : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_22_10_26(); }
  public static StatusMessage GetRootAsStatusMessage(ByteBuffer _bb) { return GetRootAsStatusMessage(_bb, new StatusMessage()); }
  public static StatusMessage GetRootAsStatusMessage(ByteBuffer _bb, StatusMessage obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public StatusMessage __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// The status ID
  public uint Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  /// This should be prioritized in the GUI in some way if true
  public bool Prioritized { get { int o = __p.__offset(6); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public solarxr_protocol.rpc.StatusData DataType { get { int o = __p.__offset(8); return o != 0 ? (solarxr_protocol.rpc.StatusData)__p.bb.Get(o + __p.bb_pos) : solarxr_protocol.rpc.StatusData.NONE; } }
  public TTable? Data<TTable>() where TTable : struct, IFlatbufferObject { int o = __p.__offset(10); return o != 0 ? (TTable?)__p.__union<TTable>(o + __p.bb_pos) : null; }
  public solarxr_protocol.rpc.StatusTrackerReset DataAsStatusTrackerReset() { return Data<solarxr_protocol.rpc.StatusTrackerReset>().Value; }
  public solarxr_protocol.rpc.StatusTrackerError DataAsStatusTrackerError() { return Data<solarxr_protocol.rpc.StatusTrackerError>().Value; }
  public solarxr_protocol.rpc.StatusSteamVRDisconnected DataAsStatusSteamVRDisconnected() { return Data<solarxr_protocol.rpc.StatusSteamVRDisconnected>().Value; }
  public solarxr_protocol.rpc.StatusUnassignedHMD DataAsStatusUnassignedHMD() { return Data<solarxr_protocol.rpc.StatusUnassignedHMD>().Value; }

  public static Offset<solarxr_protocol.rpc.StatusMessage> CreateStatusMessage(FlatBufferBuilder builder,
      uint id = 0,
      bool prioritized = false,
      solarxr_protocol.rpc.StatusData data_type = solarxr_protocol.rpc.StatusData.NONE,
      int dataOffset = 0) {
    builder.StartTable(4);
    StatusMessage.AddData(builder, dataOffset);
    StatusMessage.AddId(builder, id);
    StatusMessage.AddDataType(builder, data_type);
    StatusMessage.AddPrioritized(builder, prioritized);
    return StatusMessage.EndStatusMessage(builder);
  }

  public static void StartStatusMessage(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddId(FlatBufferBuilder builder, uint id) { builder.AddUint(0, id, 0); }
  public static void AddPrioritized(FlatBufferBuilder builder, bool prioritized) { builder.AddBool(1, prioritized, false); }
  public static void AddDataType(FlatBufferBuilder builder, solarxr_protocol.rpc.StatusData dataType) { builder.AddByte(2, (byte)dataType, 0); }
  public static void AddData(FlatBufferBuilder builder, int dataOffset) { builder.AddOffset(3, dataOffset, 0); }
  public static Offset<solarxr_protocol.rpc.StatusMessage> EndStatusMessage(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<solarxr_protocol.rpc.StatusMessage>(o);
  }
}


}
