// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace solarxr_protocol.rpc
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct FirmwareUpdateStatusResponse : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_22_10_26(); }
  public static FirmwareUpdateStatusResponse GetRootAsFirmwareUpdateStatusResponse(ByteBuffer _bb) { return GetRootAsFirmwareUpdateStatusResponse(_bb, new FirmwareUpdateStatusResponse()); }
  public static FirmwareUpdateStatusResponse GetRootAsFirmwareUpdateStatusResponse(ByteBuffer _bb, FirmwareUpdateStatusResponse obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public FirmwareUpdateStatusResponse __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public solarxr_protocol.rpc.FirmwareUpdateDeviceId DeviceIdType { get { int o = __p.__offset(4); return o != 0 ? (solarxr_protocol.rpc.FirmwareUpdateDeviceId)__p.bb.Get(o + __p.bb_pos) : solarxr_protocol.rpc.FirmwareUpdateDeviceId.NONE; } }
  public TTable? DeviceId<TTable>() where TTable : struct, IFlatbufferObject { int o = __p.__offset(6); return o != 0 ? (TTable?)__p.__union<TTable>(o + __p.bb_pos) : null; }
  public solarxr_protocol.datatypes.DeviceIdTable DeviceIdAssolarxr_protocol_datatypes_DeviceIdTable() { return DeviceId<solarxr_protocol.datatypes.DeviceIdTable>().Value; }
  public solarxr_protocol.rpc.SerialDevicePort DeviceIdAsSerialDevicePort() { return DeviceId<solarxr_protocol.rpc.SerialDevicePort>().Value; }
  public solarxr_protocol.rpc.FirmwareUpdateStatus Status { get { int o = __p.__offset(8); return o != 0 ? (solarxr_protocol.rpc.FirmwareUpdateStatus)__p.bb.Get(o + __p.bb_pos) : solarxr_protocol.rpc.FirmwareUpdateStatus.DOWNLOADING; } }
  /// from 0 to 100
  public sbyte Progress { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetSbyte(o + __p.bb_pos) : (sbyte)0; } }

  public static Offset<solarxr_protocol.rpc.FirmwareUpdateStatusResponse> CreateFirmwareUpdateStatusResponse(FlatBufferBuilder builder,
      solarxr_protocol.rpc.FirmwareUpdateDeviceId device_id_type = solarxr_protocol.rpc.FirmwareUpdateDeviceId.NONE,
      int device_idOffset = 0,
      solarxr_protocol.rpc.FirmwareUpdateStatus status = solarxr_protocol.rpc.FirmwareUpdateStatus.DOWNLOADING,
      sbyte progress = 0) {
    builder.StartTable(4);
    FirmwareUpdateStatusResponse.AddDeviceId(builder, device_idOffset);
    FirmwareUpdateStatusResponse.AddProgress(builder, progress);
    FirmwareUpdateStatusResponse.AddStatus(builder, status);
    FirmwareUpdateStatusResponse.AddDeviceIdType(builder, device_id_type);
    return FirmwareUpdateStatusResponse.EndFirmwareUpdateStatusResponse(builder);
  }

  public static void StartFirmwareUpdateStatusResponse(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddDeviceIdType(FlatBufferBuilder builder, solarxr_protocol.rpc.FirmwareUpdateDeviceId deviceIdType) { builder.AddByte(0, (byte)deviceIdType, 0); }
  public static void AddDeviceId(FlatBufferBuilder builder, int deviceIdOffset) { builder.AddOffset(1, deviceIdOffset, 0); }
  public static void AddStatus(FlatBufferBuilder builder, solarxr_protocol.rpc.FirmwareUpdateStatus status) { builder.AddByte(2, (byte)status, 0); }
  public static void AddProgress(FlatBufferBuilder builder, sbyte progress) { builder.AddSbyte(3, progress, 0); }
  public static Offset<solarxr_protocol.rpc.FirmwareUpdateStatusResponse> EndFirmwareUpdateStatusResponse(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<solarxr_protocol.rpc.FirmwareUpdateStatusResponse>(o);
  }
}


}
