// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace solarxr_protocol.rpc.settings
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct SkeletonHeight : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_22_10_26(); }
  public static SkeletonHeight GetRootAsSkeletonHeight(ByteBuffer _bb) { return GetRootAsSkeletonHeight(_bb, new SkeletonHeight()); }
  public static SkeletonHeight GetRootAsSkeletonHeight(ByteBuffer _bb, SkeletonHeight obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SkeletonHeight __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public float? HmdHeight { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float?)null; } }
  public float? FloorHeight { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float?)null; } }

  public static Offset<solarxr_protocol.rpc.settings.SkeletonHeight> CreateSkeletonHeight(FlatBufferBuilder builder,
      float? hmd_height = null,
      float? floor_height = null) {
    builder.StartTable(2);
    SkeletonHeight.AddFloorHeight(builder, floor_height);
    SkeletonHeight.AddHmdHeight(builder, hmd_height);
    return SkeletonHeight.EndSkeletonHeight(builder);
  }

  public static void StartSkeletonHeight(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddHmdHeight(FlatBufferBuilder builder, float? hmdHeight) { builder.AddFloat(0, hmdHeight); }
  public static void AddFloorHeight(FlatBufferBuilder builder, float? floorHeight) { builder.AddFloat(1, floorHeight); }
  public static Offset<solarxr_protocol.rpc.settings.SkeletonHeight> EndSkeletonHeight(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<solarxr_protocol.rpc.settings.SkeletonHeight>(o);
  }
}


}
