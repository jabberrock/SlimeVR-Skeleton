// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace solarxr_protocol.pub_sub
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// A handle for the topic, allows referencing a topic without sending a huge
/// `TopicId`.
public struct TopicHandle : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_22_10_26(); }
  public static TopicHandle GetRootAsTopicHandle(ByteBuffer _bb) { return GetRootAsTopicHandle(_bb, new TopicHandle()); }
  public static TopicHandle GetRootAsTopicHandle(ByteBuffer _bb, TopicHandle obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public TopicHandle __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public ushort Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUshort(o + __p.bb_pos) : (ushort)0; } }

  public static Offset<solarxr_protocol.pub_sub.TopicHandle> CreateTopicHandle(FlatBufferBuilder builder,
      ushort id = 0) {
    builder.StartTable(1);
    TopicHandle.AddId(builder, id);
    return TopicHandle.EndTopicHandle(builder);
  }

  public static void StartTopicHandle(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddId(FlatBufferBuilder builder, ushort id) { builder.AddUshort(0, id, 0); }
  public static Offset<solarxr_protocol.pub_sub.TopicHandle> EndTopicHandle(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<solarxr_protocol.pub_sub.TopicHandle>(o);
  }
}


}
