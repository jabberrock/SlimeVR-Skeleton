// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace solarxr_protocol.pub_sub
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// Requests a subscription to `topic`. Replies with a `TopicMapping`.
public struct SubscriptionRequest : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_22_10_26(); }
  public static SubscriptionRequest GetRootAsSubscriptionRequest(ByteBuffer _bb) { return GetRootAsSubscriptionRequest(_bb, new SubscriptionRequest()); }
  public static SubscriptionRequest GetRootAsSubscriptionRequest(ByteBuffer _bb, SubscriptionRequest obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SubscriptionRequest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public solarxr_protocol.pub_sub.Topic TopicType { get { int o = __p.__offset(4); return o != 0 ? (solarxr_protocol.pub_sub.Topic)__p.bb.Get(o + __p.bb_pos) : solarxr_protocol.pub_sub.Topic.NONE; } }
  public TTable? Topic<TTable>() where TTable : struct, IFlatbufferObject { int o = __p.__offset(6); return o != 0 ? (TTable?)__p.__union<TTable>(o + __p.bb_pos) : null; }
  public solarxr_protocol.pub_sub.TopicHandle TopicAsTopicHandle() { return Topic<solarxr_protocol.pub_sub.TopicHandle>().Value; }
  public solarxr_protocol.pub_sub.TopicId TopicAsTopicId() { return Topic<solarxr_protocol.pub_sub.TopicId>().Value; }

  public static Offset<solarxr_protocol.pub_sub.SubscriptionRequest> CreateSubscriptionRequest(FlatBufferBuilder builder,
      solarxr_protocol.pub_sub.Topic topic_type = solarxr_protocol.pub_sub.Topic.NONE,
      int topicOffset = 0) {
    builder.StartTable(2);
    SubscriptionRequest.AddTopic(builder, topicOffset);
    SubscriptionRequest.AddTopicType(builder, topic_type);
    return SubscriptionRequest.EndSubscriptionRequest(builder);
  }

  public static void StartSubscriptionRequest(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddTopicType(FlatBufferBuilder builder, solarxr_protocol.pub_sub.Topic topicType) { builder.AddByte(0, (byte)topicType, 0); }
  public static void AddTopic(FlatBufferBuilder builder, int topicOffset) { builder.AddOffset(1, topicOffset, 0); }
  public static Offset<solarxr_protocol.pub_sub.SubscriptionRequest> EndSubscriptionRequest(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<solarxr_protocol.pub_sub.SubscriptionRequest>(o);
  }
}


}
