// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace solarxr_protocol.pub_sub
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// A `TopicId` identifies an application-specific category of data. Because it
/// is application-specific, it is up to the application within the specified
/// organization to define its semantics/meaning.
///
/// For example, "bob" may have an "overlay" app with a "settings" topic for controlling
/// the overlay visibility and other settings, as well as a "video feed" topic for
/// allowing other applications to display video data in a wrist mounted window in VR.
public struct TopicId : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_22_10_26(); }
  public static TopicId GetRootAsTopicId(ByteBuffer _bb) { return GetRootAsTopicId(_bb, new TopicId()); }
  public static TopicId GetRootAsTopicId(ByteBuffer _bb, TopicId obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public TopicId __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// The organization/developer that defines the meaning of this feature. Avoids name
  /// clashes. Should be something unique - same idea as java package identifier.
  public string Organization { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOrganizationBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetOrganizationBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetOrganizationArray() { return __p.__vector_as_array<byte>(4); }
  /// The name of the application/device. Should be unique within the organization.
  public string AppName { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAppNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetAppNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetAppNameArray() { return __p.__vector_as_array<byte>(6); }
  /// The name of the topic. Should be unique within the application.
  public string Topic { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTopicBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetTopicBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetTopicArray() { return __p.__vector_as_array<byte>(8); }

  public static Offset<solarxr_protocol.pub_sub.TopicId> CreateTopicId(FlatBufferBuilder builder,
      StringOffset organizationOffset = default(StringOffset),
      StringOffset app_nameOffset = default(StringOffset),
      StringOffset topicOffset = default(StringOffset)) {
    builder.StartTable(3);
    TopicId.AddTopic(builder, topicOffset);
    TopicId.AddAppName(builder, app_nameOffset);
    TopicId.AddOrganization(builder, organizationOffset);
    return TopicId.EndTopicId(builder);
  }

  public static void StartTopicId(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddOrganization(FlatBufferBuilder builder, StringOffset organizationOffset) { builder.AddOffset(0, organizationOffset.Value, 0); }
  public static void AddAppName(FlatBufferBuilder builder, StringOffset appNameOffset) { builder.AddOffset(1, appNameOffset.Value, 0); }
  public static void AddTopic(FlatBufferBuilder builder, StringOffset topicOffset) { builder.AddOffset(2, topicOffset.Value, 0); }
  public static Offset<solarxr_protocol.pub_sub.TopicId> EndTopicId(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<solarxr_protocol.pub_sub.TopicId>(o);
  }
}


}
