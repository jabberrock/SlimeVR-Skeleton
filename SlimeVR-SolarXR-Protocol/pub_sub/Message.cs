// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace solarxr_protocol.pub_sub
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// Data that is sent from publishers to subscribers
public struct Message : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_22_10_26(); }
  public static Message GetRootAsMessage(ByteBuffer _bb) { return GetRootAsMessage(_bb, new Message()); }
  public static Message GetRootAsMessage(ByteBuffer _bb, Message obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Message __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public solarxr_protocol.pub_sub.Topic TopicType { get { int o = __p.__offset(4); return o != 0 ? (solarxr_protocol.pub_sub.Topic)__p.bb.Get(o + __p.bb_pos) : solarxr_protocol.pub_sub.Topic.NONE; } }
  public TTable? Topic<TTable>() where TTable : struct, IFlatbufferObject { int o = __p.__offset(6); return o != 0 ? (TTable?)__p.__union<TTable>(o + __p.bb_pos) : null; }
  public solarxr_protocol.pub_sub.TopicHandle TopicAsTopicHandle() { return Topic<solarxr_protocol.pub_sub.TopicHandle>().Value; }
  public solarxr_protocol.pub_sub.TopicId TopicAsTopicId() { return Topic<solarxr_protocol.pub_sub.TopicId>().Value; }
  public solarxr_protocol.pub_sub.Payload PayloadType { get { int o = __p.__offset(8); return o != 0 ? (solarxr_protocol.pub_sub.Payload)__p.bb.Get(o + __p.bb_pos) : solarxr_protocol.pub_sub.Payload.NONE; } }
  public TTable? Payload<TTable>() where TTable : struct, IFlatbufferObject { int o = __p.__offset(10); return o != 0 ? (TTable?)__p.__union<TTable>(o + __p.bb_pos) : null; }
  public solarxr_protocol.datatypes.StringTable PayloadAssolarxr_protocol_datatypes_StringTable() { return Payload<solarxr_protocol.datatypes.StringTable>().Value; }
  public solarxr_protocol.datatypes.Bytes PayloadAssolarxr_protocol_datatypes_Bytes() { return Payload<solarxr_protocol.datatypes.Bytes>().Value; }
  public solarxr_protocol.pub_sub.KeyValues PayloadAsKeyValues() { return Payload<solarxr_protocol.pub_sub.KeyValues>().Value; }

  public static Offset<solarxr_protocol.pub_sub.Message> CreateMessage(FlatBufferBuilder builder,
      solarxr_protocol.pub_sub.Topic topic_type = solarxr_protocol.pub_sub.Topic.NONE,
      int topicOffset = 0,
      solarxr_protocol.pub_sub.Payload payload_type = solarxr_protocol.pub_sub.Payload.NONE,
      int payloadOffset = 0) {
    builder.StartTable(4);
    Message.AddPayload(builder, payloadOffset);
    Message.AddTopic(builder, topicOffset);
    Message.AddPayloadType(builder, payload_type);
    Message.AddTopicType(builder, topic_type);
    return Message.EndMessage(builder);
  }

  public static void StartMessage(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddTopicType(FlatBufferBuilder builder, solarxr_protocol.pub_sub.Topic topicType) { builder.AddByte(0, (byte)topicType, 0); }
  public static void AddTopic(FlatBufferBuilder builder, int topicOffset) { builder.AddOffset(1, topicOffset, 0); }
  public static void AddPayloadType(FlatBufferBuilder builder, solarxr_protocol.pub_sub.Payload payloadType) { builder.AddByte(2, (byte)payloadType, 0); }
  public static void AddPayload(FlatBufferBuilder builder, int payloadOffset) { builder.AddOffset(3, payloadOffset, 0); }
  public static Offset<solarxr_protocol.pub_sub.Message> EndMessage(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<solarxr_protocol.pub_sub.Message>(o);
  }
}


}
