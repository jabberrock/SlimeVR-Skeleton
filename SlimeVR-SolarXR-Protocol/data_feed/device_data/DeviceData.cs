// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace solarxr_protocol.data_feed.device_data
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// Describes all possible information about a hardware device. For example, a
/// vive tracker is a  single hardware device, and a slime tracker with two
/// extensions is a single hardware device but two trackers.
public struct DeviceData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_22_10_26(); }
  public static DeviceData GetRootAsDeviceData(ByteBuffer _bb) { return GetRootAsDeviceData(_bb, new DeviceData()); }
  public static DeviceData GetRootAsDeviceData(ByteBuffer _bb, DeviceData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public DeviceData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public solarxr_protocol.datatypes.DeviceId? Id { get { int o = __p.__offset(4); return o != 0 ? (solarxr_protocol.datatypes.DeviceId?)(new solarxr_protocol.datatypes.DeviceId()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  /// The dynamically changeable name of the device. This might be set by the
  /// user to help them remember which tracker is which.
  public string CustomName { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCustomNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetCustomNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetCustomNameArray() { return __p.__vector_as_array<byte>(6); }
  /// Mostly-static info about the device hardware
  public solarxr_protocol.datatypes.hardware_info.HardwareInfo? HardwareInfo { get { int o = __p.__offset(8); return o != 0 ? (solarxr_protocol.datatypes.hardware_info.HardwareInfo?)(new solarxr_protocol.datatypes.hardware_info.HardwareInfo()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  /// General info about the status of the device
  public solarxr_protocol.datatypes.hardware_info.HardwareStatus? HardwareStatus { get { int o = __p.__offset(10); return o != 0 ? (solarxr_protocol.datatypes.hardware_info.HardwareStatus?)(new solarxr_protocol.datatypes.hardware_info.HardwareStatus()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  /// Info about all trackers attached to this device
  public solarxr_protocol.data_feed.tracker.TrackerData? Trackers(int j) { int o = __p.__offset(12); return o != 0 ? (solarxr_protocol.data_feed.tracker.TrackerData?)(new solarxr_protocol.data_feed.tracker.TrackerData()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int TrackersLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static void StartDeviceData(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddId(FlatBufferBuilder builder, Offset<solarxr_protocol.datatypes.DeviceId> idOffset) { builder.AddStruct(0, idOffset.Value, 0); }
  public static void AddCustomName(FlatBufferBuilder builder, StringOffset customNameOffset) { builder.AddOffset(1, customNameOffset.Value, 0); }
  public static void AddHardwareInfo(FlatBufferBuilder builder, Offset<solarxr_protocol.datatypes.hardware_info.HardwareInfo> hardwareInfoOffset) { builder.AddOffset(2, hardwareInfoOffset.Value, 0); }
  public static void AddHardwareStatus(FlatBufferBuilder builder, Offset<solarxr_protocol.datatypes.hardware_info.HardwareStatus> hardwareStatusOffset) { builder.AddOffset(3, hardwareStatusOffset.Value, 0); }
  public static void AddTrackers(FlatBufferBuilder builder, VectorOffset trackersOffset) { builder.AddOffset(4, trackersOffset.Value, 0); }
  public static VectorOffset CreateTrackersVector(FlatBufferBuilder builder, Offset<solarxr_protocol.data_feed.tracker.TrackerData>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateTrackersVectorBlock(FlatBufferBuilder builder, Offset<solarxr_protocol.data_feed.tracker.TrackerData>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTrackersVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<solarxr_protocol.data_feed.tracker.TrackerData>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTrackersVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<solarxr_protocol.data_feed.tracker.TrackerData>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartTrackersVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<solarxr_protocol.data_feed.device_data.DeviceData> EndDeviceData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<solarxr_protocol.data_feed.device_data.DeviceData>(o);
  }
}


}
