// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace solarxr_protocol.data_feed.device_data
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// A mask of values to be reported in subsequent DeviceStatus. Values set to `false`
/// or `null` will not reported. By default, all fields are false/null.
///
/// If you set a value to `true`, it is not guaranteed that the sender actually has
/// such a value to send. In this case, they will probably send `null`, and the receiver
/// has the choice to disconnect due to missing data.
public struct DeviceDataMask : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_22_10_26(); }
  public static DeviceDataMask GetRootAsDeviceDataMask(ByteBuffer _bb) { return GetRootAsDeviceDataMask(_bb, new DeviceDataMask()); }
  public static DeviceDataMask GetRootAsDeviceDataMask(ByteBuffer _bb, DeviceDataMask obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public DeviceDataMask __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Which tracker data should be sent in this data feed
  public solarxr_protocol.data_feed.tracker.TrackerDataMask? TrackerData { get { int o = __p.__offset(4); return o != 0 ? (solarxr_protocol.data_feed.tracker.TrackerDataMask?)(new solarxr_protocol.data_feed.tracker.TrackerDataMask()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  /// true if device data should be sent in this data feed
  public bool DeviceData { get { int o = __p.__offset(6); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<solarxr_protocol.data_feed.device_data.DeviceDataMask> CreateDeviceDataMask(FlatBufferBuilder builder,
      Offset<solarxr_protocol.data_feed.tracker.TrackerDataMask> tracker_dataOffset = default(Offset<solarxr_protocol.data_feed.tracker.TrackerDataMask>),
      bool device_data = false) {
    builder.StartTable(2);
    DeviceDataMask.AddTrackerData(builder, tracker_dataOffset);
    DeviceDataMask.AddDeviceData(builder, device_data);
    return DeviceDataMask.EndDeviceDataMask(builder);
  }

  public static void StartDeviceDataMask(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddTrackerData(FlatBufferBuilder builder, Offset<solarxr_protocol.data_feed.tracker.TrackerDataMask> trackerDataOffset) { builder.AddOffset(0, trackerDataOffset.Value, 0); }
  public static void AddDeviceData(FlatBufferBuilder builder, bool deviceData) { builder.AddBool(1, deviceData, false); }
  public static Offset<solarxr_protocol.data_feed.device_data.DeviceDataMask> EndDeviceDataMask(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<solarxr_protocol.data_feed.device_data.DeviceDataMask>(o);
  }
}


}
