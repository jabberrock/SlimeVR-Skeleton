// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace solarxr_protocol.data_feed
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// All information related to the configuration of a data feed. This may be sent
/// as part of a `StartFeed`.
public struct DataFeedConfig : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_22_10_26(); }
  public static DataFeedConfig GetRootAsDataFeedConfig(ByteBuffer _bb) { return GetRootAsDataFeedConfig(_bb, new DataFeedConfig()); }
  public static DataFeedConfig GetRootAsDataFeedConfig(ByteBuffer _bb, DataFeedConfig obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public DataFeedConfig __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Minimum delay in milliseconds between new data updates. This value will be
  /// ignored when used for a `PollDataFeed`.
  public ushort MinimumTimeSinceLast { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUshort(o + __p.bb_pos) : (ushort)0; } }
  public solarxr_protocol.data_feed.device_data.DeviceDataMask? DataMask { get { int o = __p.__offset(6); return o != 0 ? (solarxr_protocol.data_feed.device_data.DeviceDataMask?)(new solarxr_protocol.data_feed.device_data.DeviceDataMask()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public solarxr_protocol.data_feed.tracker.TrackerDataMask? SyntheticTrackersMask { get { int o = __p.__offset(8); return o != 0 ? (solarxr_protocol.data_feed.tracker.TrackerDataMask?)(new solarxr_protocol.data_feed.tracker.TrackerDataMask()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public bool BoneMask { get { int o = __p.__offset(10); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<solarxr_protocol.data_feed.DataFeedConfig> CreateDataFeedConfig(FlatBufferBuilder builder,
      ushort minimum_time_since_last = 0,
      Offset<solarxr_protocol.data_feed.device_data.DeviceDataMask> data_maskOffset = default(Offset<solarxr_protocol.data_feed.device_data.DeviceDataMask>),
      Offset<solarxr_protocol.data_feed.tracker.TrackerDataMask> synthetic_trackers_maskOffset = default(Offset<solarxr_protocol.data_feed.tracker.TrackerDataMask>),
      bool bone_mask = false) {
    builder.StartTable(4);
    DataFeedConfig.AddSyntheticTrackersMask(builder, synthetic_trackers_maskOffset);
    DataFeedConfig.AddDataMask(builder, data_maskOffset);
    DataFeedConfig.AddMinimumTimeSinceLast(builder, minimum_time_since_last);
    DataFeedConfig.AddBoneMask(builder, bone_mask);
    return DataFeedConfig.EndDataFeedConfig(builder);
  }

  public static void StartDataFeedConfig(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddMinimumTimeSinceLast(FlatBufferBuilder builder, ushort minimumTimeSinceLast) { builder.AddUshort(0, minimumTimeSinceLast, 0); }
  public static void AddDataMask(FlatBufferBuilder builder, Offset<solarxr_protocol.data_feed.device_data.DeviceDataMask> dataMaskOffset) { builder.AddOffset(1, dataMaskOffset.Value, 0); }
  public static void AddSyntheticTrackersMask(FlatBufferBuilder builder, Offset<solarxr_protocol.data_feed.tracker.TrackerDataMask> syntheticTrackersMaskOffset) { builder.AddOffset(2, syntheticTrackersMaskOffset.Value, 0); }
  public static void AddBoneMask(FlatBufferBuilder builder, bool boneMask) { builder.AddBool(3, boneMask, false); }
  public static Offset<solarxr_protocol.data_feed.DataFeedConfig> EndDataFeedConfig(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<solarxr_protocol.data_feed.DataFeedConfig>(o);
  }
}


}
