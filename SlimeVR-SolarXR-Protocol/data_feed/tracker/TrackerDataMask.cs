// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace solarxr_protocol.data_feed.tracker
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// A mask of the different components in `TrackerComponent`
public struct TrackerDataMask : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_22_10_26(); }
  public static TrackerDataMask GetRootAsTrackerDataMask(ByteBuffer _bb) { return GetRootAsTrackerDataMask(_bb, new TrackerDataMask()); }
  public static TrackerDataMask GetRootAsTrackerDataMask(ByteBuffer _bb, TrackerDataMask obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public TrackerDataMask __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public bool Info { get { int o = __p.__offset(4); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool Status { get { int o = __p.__offset(6); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool Rotation { get { int o = __p.__offset(8); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool Position { get { int o = __p.__offset(10); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool RawAngularVelocity { get { int o = __p.__offset(12); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool RawAcceleration { get { int o = __p.__offset(14); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool Temp { get { int o = __p.__offset(16); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool LinearAcceleration { get { int o = __p.__offset(18); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool RotationReferenceAdjusted { get { int o = __p.__offset(20); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool RotationIdentityAdjusted { get { int o = __p.__offset(22); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool Tps { get { int o = __p.__offset(24); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<solarxr_protocol.data_feed.tracker.TrackerDataMask> CreateTrackerDataMask(FlatBufferBuilder builder,
      bool info = false,
      bool status = false,
      bool rotation = false,
      bool position = false,
      bool raw_angular_velocity = false,
      bool raw_acceleration = false,
      bool temp = false,
      bool linear_acceleration = false,
      bool rotation_reference_adjusted = false,
      bool rotation_identity_adjusted = false,
      bool tps = false) {
    builder.StartTable(11);
    TrackerDataMask.AddTps(builder, tps);
    TrackerDataMask.AddRotationIdentityAdjusted(builder, rotation_identity_adjusted);
    TrackerDataMask.AddRotationReferenceAdjusted(builder, rotation_reference_adjusted);
    TrackerDataMask.AddLinearAcceleration(builder, linear_acceleration);
    TrackerDataMask.AddTemp(builder, temp);
    TrackerDataMask.AddRawAcceleration(builder, raw_acceleration);
    TrackerDataMask.AddRawAngularVelocity(builder, raw_angular_velocity);
    TrackerDataMask.AddPosition(builder, position);
    TrackerDataMask.AddRotation(builder, rotation);
    TrackerDataMask.AddStatus(builder, status);
    TrackerDataMask.AddInfo(builder, info);
    return TrackerDataMask.EndTrackerDataMask(builder);
  }

  public static void StartTrackerDataMask(FlatBufferBuilder builder) { builder.StartTable(11); }
  public static void AddInfo(FlatBufferBuilder builder, bool info) { builder.AddBool(0, info, false); }
  public static void AddStatus(FlatBufferBuilder builder, bool status) { builder.AddBool(1, status, false); }
  public static void AddRotation(FlatBufferBuilder builder, bool rotation) { builder.AddBool(2, rotation, false); }
  public static void AddPosition(FlatBufferBuilder builder, bool position) { builder.AddBool(3, position, false); }
  public static void AddRawAngularVelocity(FlatBufferBuilder builder, bool rawAngularVelocity) { builder.AddBool(4, rawAngularVelocity, false); }
  public static void AddRawAcceleration(FlatBufferBuilder builder, bool rawAcceleration) { builder.AddBool(5, rawAcceleration, false); }
  public static void AddTemp(FlatBufferBuilder builder, bool temp) { builder.AddBool(6, temp, false); }
  public static void AddLinearAcceleration(FlatBufferBuilder builder, bool linearAcceleration) { builder.AddBool(7, linearAcceleration, false); }
  public static void AddRotationReferenceAdjusted(FlatBufferBuilder builder, bool rotationReferenceAdjusted) { builder.AddBool(8, rotationReferenceAdjusted, false); }
  public static void AddRotationIdentityAdjusted(FlatBufferBuilder builder, bool rotationIdentityAdjusted) { builder.AddBool(9, rotationIdentityAdjusted, false); }
  public static void AddTps(FlatBufferBuilder builder, bool tps) { builder.AddBool(10, tps, false); }
  public static Offset<solarxr_protocol.data_feed.tracker.TrackerDataMask> EndTrackerDataMask(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<solarxr_protocol.data_feed.tracker.TrackerDataMask>(o);
  }
}


}
