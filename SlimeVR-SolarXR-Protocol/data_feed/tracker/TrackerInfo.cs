// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace solarxr_protocol.data_feed.tracker
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// Static description of a tracker
public struct TrackerInfo : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_22_10_26(); }
  public static TrackerInfo GetRootAsTrackerInfo(ByteBuffer _bb) { return GetRootAsTrackerInfo(_bb, new TrackerInfo()); }
  public static TrackerInfo GetRootAsTrackerInfo(ByteBuffer _bb, TrackerInfo obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public TrackerInfo __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public solarxr_protocol.datatypes.hardware_info.ImuType ImuType { get { int o = __p.__offset(4); return o != 0 ? (solarxr_protocol.datatypes.hardware_info.ImuType)__p.bb.GetUshort(o + __p.bb_pos) : solarxr_protocol.datatypes.hardware_info.ImuType.Other; } }
  /// The user-assigned role of the tracker.
  public solarxr_protocol.datatypes.BodyPart BodyPart { get { int o = __p.__offset(6); return o != 0 ? (solarxr_protocol.datatypes.BodyPart)__p.bb.Get(o + __p.bb_pos) : solarxr_protocol.datatypes.BodyPart.NONE; } }
  /// average samples per second
  public solarxr_protocol.datatypes.HzF32? PollRate { get { int o = __p.__offset(8); return o != 0 ? (solarxr_protocol.datatypes.HzF32?)(new solarxr_protocol.datatypes.HzF32()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  /// The orientation of the tracker when mounted on the body
  public solarxr_protocol.datatypes.math.Quat? MountingOrientation { get { int o = __p.__offset(10); return o != 0 ? (solarxr_protocol.datatypes.math.Quat?)(new solarxr_protocol.datatypes.math.Quat()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  /// Should the tracker's settings be editable by the user
  public bool Editable { get { int o = __p.__offset(12); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  /// Indicates if the tracker is computed (solved position and rotation)
  public bool IsComputed { get { int o = __p.__offset(14); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  /// Indicates if the tracker is using an IMU for its tracking data
  public bool IsImu { get { int o = __p.__offset(16); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  /// A human-friendly name to display as the name of the tracker.
  public string DisplayName { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDisplayNameBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetDisplayNameBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetDisplayNameArray() { return __p.__vector_as_array<byte>(18); }
  /// name to display as the name of the tracker set by the user
  public string CustomName { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCustomNameBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetCustomNameBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetCustomNameArray() { return __p.__vector_as_array<byte>(20); }
  /// Whether to allow yaw drift compensation for this tracker or not.
  public bool AllowDriftCompensation { get { int o = __p.__offset(22); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  /// Mounting Reset orientation overrides the current `mounting_orientation` of
  /// the tracker, this orientation is not saved and needs to be calculated
  /// each time the server is ran
  public solarxr_protocol.datatypes.math.Quat? MountingResetOrientation { get { int o = __p.__offset(24); return o != 0 ? (solarxr_protocol.datatypes.math.Quat?)(new solarxr_protocol.datatypes.math.Quat()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  /// Indicates if the tracker is actually an HMD
  public bool IsHmd { get { int o = __p.__offset(26); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public solarxr_protocol.datatypes.MagnetometerStatus Magnetometer { get { int o = __p.__offset(28); return o != 0 ? (solarxr_protocol.datatypes.MagnetometerStatus)__p.bb.Get(o + __p.bb_pos) : solarxr_protocol.datatypes.MagnetometerStatus.NOT_SUPPORTED; } }
  /// Indicates what type of data the tracker sends (note: it always ends up being rotation in the end)
  public solarxr_protocol.datatypes.hardware_info.TrackerDataType DataSupport { get { int o = __p.__offset(30); return o != 0 ? (solarxr_protocol.datatypes.hardware_info.TrackerDataType)__p.bb.Get(o + __p.bb_pos) : solarxr_protocol.datatypes.hardware_info.TrackerDataType.ROTATION; } }

  public static void StartTrackerInfo(FlatBufferBuilder builder) { builder.StartTable(14); }
  public static void AddImuType(FlatBufferBuilder builder, solarxr_protocol.datatypes.hardware_info.ImuType imuType) { builder.AddUshort(0, (ushort)imuType, 0); }
  public static void AddBodyPart(FlatBufferBuilder builder, solarxr_protocol.datatypes.BodyPart bodyPart) { builder.AddByte(1, (byte)bodyPart, 0); }
  public static void AddPollRate(FlatBufferBuilder builder, Offset<solarxr_protocol.datatypes.HzF32> pollRateOffset) { builder.AddStruct(2, pollRateOffset.Value, 0); }
  public static void AddMountingOrientation(FlatBufferBuilder builder, Offset<solarxr_protocol.datatypes.math.Quat> mountingOrientationOffset) { builder.AddStruct(3, mountingOrientationOffset.Value, 0); }
  public static void AddEditable(FlatBufferBuilder builder, bool editable) { builder.AddBool(4, editable, false); }
  public static void AddIsComputed(FlatBufferBuilder builder, bool isComputed) { builder.AddBool(5, isComputed, false); }
  public static void AddIsImu(FlatBufferBuilder builder, bool isImu) { builder.AddBool(6, isImu, false); }
  public static void AddDisplayName(FlatBufferBuilder builder, StringOffset displayNameOffset) { builder.AddOffset(7, displayNameOffset.Value, 0); }
  public static void AddCustomName(FlatBufferBuilder builder, StringOffset customNameOffset) { builder.AddOffset(8, customNameOffset.Value, 0); }
  public static void AddAllowDriftCompensation(FlatBufferBuilder builder, bool allowDriftCompensation) { builder.AddBool(9, allowDriftCompensation, false); }
  public static void AddMountingResetOrientation(FlatBufferBuilder builder, Offset<solarxr_protocol.datatypes.math.Quat> mountingResetOrientationOffset) { builder.AddStruct(10, mountingResetOrientationOffset.Value, 0); }
  public static void AddIsHmd(FlatBufferBuilder builder, bool isHmd) { builder.AddBool(11, isHmd, false); }
  public static void AddMagnetometer(FlatBufferBuilder builder, solarxr_protocol.datatypes.MagnetometerStatus magnetometer) { builder.AddByte(12, (byte)magnetometer, 0); }
  public static void AddDataSupport(FlatBufferBuilder builder, solarxr_protocol.datatypes.hardware_info.TrackerDataType dataSupport) { builder.AddByte(13, (byte)dataSupport, 0); }
  public static Offset<solarxr_protocol.data_feed.tracker.TrackerInfo> EndTrackerInfo(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<solarxr_protocol.data_feed.tracker.TrackerInfo>(o);
  }
}


}
