// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace solarxr_protocol.data_feed
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct Bone : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_22_10_26(); }
  public static Bone GetRootAsBone(ByteBuffer _bb) { return GetRootAsBone(_bb, new Bone()); }
  public static Bone GetRootAsBone(ByteBuffer _bb, Bone obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Bone __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public solarxr_protocol.datatypes.BodyPart BodyPart { get { int o = __p.__offset(4); return o != 0 ? (solarxr_protocol.datatypes.BodyPart)__p.bb.Get(o + __p.bb_pos) : solarxr_protocol.datatypes.BodyPart.NONE; } }
  /// The global rotation of the bone.
  ///
  /// Note that the identity rotation is where a bone's tail is towards -y (assuming
  /// the head of the bone is the origin)
  public solarxr_protocol.datatypes.math.Quat? RotationG { get { int o = __p.__offset(6); return o != 0 ? (solarxr_protocol.datatypes.math.Quat?)(new solarxr_protocol.datatypes.math.Quat()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public float BoneLength { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// The global position of the head of this bone.
  ///
  /// The head of a bone is joint/node of the bone touching the parent bone. The
  /// parent is defined as the bone closer to the HMD.
  public solarxr_protocol.datatypes.math.Vec3f? HeadPositionG { get { int o = __p.__offset(10); return o != 0 ? (solarxr_protocol.datatypes.math.Vec3f?)(new solarxr_protocol.datatypes.math.Vec3f()).__assign(o + __p.bb_pos, __p.bb) : null; } }

  public static void StartBone(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddBodyPart(FlatBufferBuilder builder, solarxr_protocol.datatypes.BodyPart bodyPart) { builder.AddByte(0, (byte)bodyPart, 0); }
  public static void AddRotationG(FlatBufferBuilder builder, Offset<solarxr_protocol.datatypes.math.Quat> rotationGOffset) { builder.AddStruct(1, rotationGOffset.Value, 0); }
  public static void AddBoneLength(FlatBufferBuilder builder, float boneLength) { builder.AddFloat(2, boneLength, 0.0f); }
  public static void AddHeadPositionG(FlatBufferBuilder builder, Offset<solarxr_protocol.datatypes.math.Vec3f> headPositionGOffset) { builder.AddStruct(3, headPositionGOffset.Value, 0); }
  public static Offset<solarxr_protocol.data_feed.Bone> EndBone(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<solarxr_protocol.data_feed.Bone>(o);
  }
}


}
