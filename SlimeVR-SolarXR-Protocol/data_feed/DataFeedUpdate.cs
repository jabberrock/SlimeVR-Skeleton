// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace solarxr_protocol.data_feed
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// All of the data components related to a single data feed. A data feed is comprised
/// of device data, and tracker data.
///
/// A data feed might send data only when it changes/updates, and we should make no
/// assumptions that the data is actually delivered. If you want to guarantee
/// delivery and avoid dropped observations of data (such as a user-initiated
/// button press), it is better to use the RPC system.
public struct DataFeedUpdate : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_22_10_26(); }
  public static DataFeedUpdate GetRootAsDataFeedUpdate(ByteBuffer _bb) { return GetRootAsDataFeedUpdate(_bb, new DataFeedUpdate()); }
  public static DataFeedUpdate GetRootAsDataFeedUpdate(ByteBuffer _bb, DataFeedUpdate obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public DataFeedUpdate __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public solarxr_protocol.data_feed.device_data.DeviceData? Devices(int j) { int o = __p.__offset(4); return o != 0 ? (solarxr_protocol.data_feed.device_data.DeviceData?)(new solarxr_protocol.data_feed.device_data.DeviceData()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int DevicesLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
  public solarxr_protocol.data_feed.tracker.TrackerData? SyntheticTrackers(int j) { int o = __p.__offset(6); return o != 0 ? (solarxr_protocol.data_feed.tracker.TrackerData?)(new solarxr_protocol.data_feed.tracker.TrackerData()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int SyntheticTrackersLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// This must represent a set, where there is no more than one bone for a `BodyPart`.
  public solarxr_protocol.data_feed.Bone? Bones(int j) { int o = __p.__offset(8); return o != 0 ? (solarxr_protocol.data_feed.Bone?)(new solarxr_protocol.data_feed.Bone()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int BonesLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<solarxr_protocol.data_feed.DataFeedUpdate> CreateDataFeedUpdate(FlatBufferBuilder builder,
      VectorOffset devicesOffset = default(VectorOffset),
      VectorOffset synthetic_trackersOffset = default(VectorOffset),
      VectorOffset bonesOffset = default(VectorOffset)) {
    builder.StartTable(3);
    DataFeedUpdate.AddBones(builder, bonesOffset);
    DataFeedUpdate.AddSyntheticTrackers(builder, synthetic_trackersOffset);
    DataFeedUpdate.AddDevices(builder, devicesOffset);
    return DataFeedUpdate.EndDataFeedUpdate(builder);
  }

  public static void StartDataFeedUpdate(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddDevices(FlatBufferBuilder builder, VectorOffset devicesOffset) { builder.AddOffset(0, devicesOffset.Value, 0); }
  public static VectorOffset CreateDevicesVector(FlatBufferBuilder builder, Offset<solarxr_protocol.data_feed.device_data.DeviceData>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDevicesVectorBlock(FlatBufferBuilder builder, Offset<solarxr_protocol.data_feed.device_data.DeviceData>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDevicesVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<solarxr_protocol.data_feed.device_data.DeviceData>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDevicesVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<solarxr_protocol.data_feed.device_data.DeviceData>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartDevicesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddSyntheticTrackers(FlatBufferBuilder builder, VectorOffset syntheticTrackersOffset) { builder.AddOffset(1, syntheticTrackersOffset.Value, 0); }
  public static VectorOffset CreateSyntheticTrackersVector(FlatBufferBuilder builder, Offset<solarxr_protocol.data_feed.tracker.TrackerData>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateSyntheticTrackersVectorBlock(FlatBufferBuilder builder, Offset<solarxr_protocol.data_feed.tracker.TrackerData>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSyntheticTrackersVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<solarxr_protocol.data_feed.tracker.TrackerData>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSyntheticTrackersVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<solarxr_protocol.data_feed.tracker.TrackerData>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartSyntheticTrackersVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddBones(FlatBufferBuilder builder, VectorOffset bonesOffset) { builder.AddOffset(2, bonesOffset.Value, 0); }
  public static VectorOffset CreateBonesVector(FlatBufferBuilder builder, Offset<solarxr_protocol.data_feed.Bone>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateBonesVectorBlock(FlatBufferBuilder builder, Offset<solarxr_protocol.data_feed.Bone>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBonesVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<solarxr_protocol.data_feed.Bone>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBonesVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<solarxr_protocol.data_feed.Bone>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartBonesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<solarxr_protocol.data_feed.DataFeedUpdate> EndDataFeedUpdate(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<solarxr_protocol.data_feed.DataFeedUpdate>(o);
  }
}


}
